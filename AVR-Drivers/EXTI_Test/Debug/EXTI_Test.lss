
EXTI_Test.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000e1e  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .bss          00000006  00800060  00800060  00000e92  2**0
                  ALLOC
  2 .stab         00001074  00000000  00000000  00000e94  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      0000067d  00000000  00000000  00001f08  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3e 06 	jmp	0xc7c	; 0xc7c <__vector_1>
   8:	0c 94 71 06 	jmp	0xce2	; 0xce2 <__vector_2>
   c:	0c 94 a4 06 	jmp	0xd48	; 0xd48 <__vector_3>
  10:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  14:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  18:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  1c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  20:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  24:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  28:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  2c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  30:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  34:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  38:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  3c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  40:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  44:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  48:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  4c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  50:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_clear_bss>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	01 c0       	rjmp	.+2      	; 0x6a <.do_clear_bss_start>

00000068 <.do_clear_bss_loop>:
  68:	1d 92       	st	X+, r1

0000006a <.do_clear_bss_start>:
  6a:	a6 36       	cpi	r26, 0x66	; 102
  6c:	b1 07       	cpc	r27, r17
  6e:	e1 f7       	brne	.-8      	; 0x68 <.do_clear_bss_loop>
  70:	0e 94 f3 06 	call	0xde6	; 0xde6 <main>
  74:	0c 94 0d 07 	jmp	0xe1a	; 0xe1a <_exit>

00000078 <__bad_interrupt>:
  78:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000007c <DIO_u8Init>:
#include  "DIO_interface.h"
#include "DIO_private.h"
#include "DIO_config.h"


void DIO_u8Init(void){
  7c:	df 93       	push	r29
  7e:	cf 93       	push	r28
  80:	cd b7       	in	r28, 0x3d	; 61
  82:	de b7       	in	r29, 0x3e	; 62
DIO_u8_DDRA_REG=PRIVATE_u8_CONC(DIO_u8_PA7_DIRECTION,DIO_u8_PA6_DIRECTION,DIO_u8_PA5_DIRECTION,DIO_u8_PA4_DIRECTION,
  84:	ea e3       	ldi	r30, 0x3A	; 58
  86:	f0 e0       	ldi	r31, 0x00	; 0
  88:	10 82       	st	Z, r1
		DIO_u8_PA3_DIRECTION,DIO_u8_PA2_DIRECTION,DIO_u8_PA1_DIRECTION,DIO_u8_PA0_DIRECTION);
DIO_u8_DDRB_REG=PRIVATE_u8_CONC(DIO_u8_PB7_DIRECTION,DIO_u8_PB6_DIRECTION,DIO_u8_PB5_DIRECTION,DIO_u8_PB4_DIRECTION,
  8a:	e7 e3       	ldi	r30, 0x37	; 55
  8c:	f0 e0       	ldi	r31, 0x00	; 0
  8e:	10 82       	st	Z, r1
		DIO_u8_PB3_DIRECTION,DIO_u8_PB2_DIRECTION,DIO_u8_PB1_DIRECTION,DIO_u8_PB0_DIRECTION);
DIO_u8_DDRC_REG=PRIVATE_u8_CONC(DIO_u8_PC7_DIRECTION,DIO_u8_PC6_DIRECTION,DIO_u8_PC5_DIRECTION,DIO_u8_PC4_DIRECTION,
  90:	e4 e3       	ldi	r30, 0x34	; 52
  92:	f0 e0       	ldi	r31, 0x00	; 0
  94:	81 e2       	ldi	r24, 0x21	; 33
  96:	80 83       	st	Z, r24
		DIO_u8_PC3_DIRECTION,DIO_u8_PC2_DIRECTION,DIO_u8_PC1_DIRECTION,DIO_u8_PC0_DIRECTION);
DIO_u8_DDRD_REG=PRIVATE_u8_CONC(DIO_u8_PD7_DIRECTION,DIO_u8_PD6_DIRECTION,DIO_u8_PD5_DIRECTION,DIO_u8_PD4_DIRECTION,
  98:	e1 e3       	ldi	r30, 0x31	; 49
  9a:	f0 e0       	ldi	r31, 0x00	; 0
  9c:	10 82       	st	Z, r1
		DIO_u8_PD3_DIRECTION,DIO_u8_PD2_DIRECTION,DIO_u8_PD1_DIRECTION,DIO_u8_PD0_DIRECTION);

DIO_u8_PORTA_REG=PRIVATE_u8_CONC(DIO_u8_PA7_VALUE,DIO_u8_PA6_VALUE,DIO_u8_PA5_VALUE,DIO_u8_PA4_VALUE,
  9e:	eb e3       	ldi	r30, 0x3B	; 59
  a0:	f0 e0       	ldi	r31, 0x00	; 0
  a2:	10 82       	st	Z, r1
		DIO_u8_PA3_VALUE,DIO_u8_PA2_VALUE,DIO_u8_PA1_VALUE,DIO_u8_PA0_VALUE);
DIO_u8_PORTB_REG=PRIVATE_u8_CONC(DIO_u8_PB7_VALUE,DIO_u8_PB6_VALUE,DIO_u8_PB5_VALUE,DIO_u8_PB4_VALUE,
  a4:	e8 e3       	ldi	r30, 0x38	; 56
  a6:	f0 e0       	ldi	r31, 0x00	; 0
  a8:	81 e0       	ldi	r24, 0x01	; 1
  aa:	80 83       	st	Z, r24
		DIO_u8_PB3_VALUE,DIO_u8_PB2_VALUE,DIO_u8_PB1_VALUE,DIO_u8_PB0_VALUE);
DIO_u8_PORTC_REG=PRIVATE_u8_CONC(DIO_u8_PC7_VALUE,DIO_u8_PC6_VALUE,DIO_u8_PC5_VALUE,DIO_u8_PC4_VALUE,
  ac:	e5 e3       	ldi	r30, 0x35	; 53
  ae:	f0 e0       	ldi	r31, 0x00	; 0
  b0:	10 82       	st	Z, r1
		DIO_u8_PC3_VALUE,DIO_u8_PC2_VALUE,DIO_u8_PC1_VALUE,DIO_u8_PC0_VALUE);
DIO_u8_PORTD_REG=PRIVATE_u8_CONC(DIO_u8_PD7_VALUE,DIO_u8_PD6_VALUE,DIO_u8_PD5_VALUE,DIO_u8_PD4_VALUE,
  b2:	e2 e3       	ldi	r30, 0x32	; 50
  b4:	f0 e0       	ldi	r31, 0x00	; 0
  b6:	84 e0       	ldi	r24, 0x04	; 4
  b8:	80 83       	st	Z, r24
		DIO_u8_PD3_VALUE,DIO_u8_PD2_VALUE,DIO_u8_PD1_VALUE,DIO_u8_PD0_VALUE);

}
  ba:	cf 91       	pop	r28
  bc:	df 91       	pop	r29
  be:	08 95       	ret

000000c0 <DIO_u8SetPinDirection>:
u8 DIO_u8SetPinDirection(u8 Copy_u8PortId, u8 Copy_u8PinId,
		u8 Copy_u8PinDirection) {
  c0:	df 93       	push	r29
  c2:	cf 93       	push	r28
  c4:	cd b7       	in	r28, 0x3d	; 61
  c6:	de b7       	in	r29, 0x3e	; 62
  c8:	2e 97       	sbiw	r28, 0x0e	; 14
  ca:	0f b6       	in	r0, 0x3f	; 63
  cc:	f8 94       	cli
  ce:	de bf       	out	0x3e, r29	; 62
  d0:	0f be       	out	0x3f, r0	; 63
  d2:	cd bf       	out	0x3d, r28	; 61
  d4:	8a 83       	std	Y+2, r24	; 0x02
  d6:	6b 83       	std	Y+3, r22	; 0x03
  d8:	4c 83       	std	Y+4, r20	; 0x04

	u8 Local_u8ErrorState = STD_TYPES_OK;
  da:	81 e0       	ldi	r24, 0x01	; 1
  dc:	89 83       	std	Y+1, r24	; 0x01
	if ((Copy_u8PinId <= DIO_u8_PIN7)) {
  de:	8b 81       	ldd	r24, Y+3	; 0x03
  e0:	88 30       	cpi	r24, 0x08	; 8
  e2:	08 f0       	brcs	.+2      	; 0xe6 <DIO_u8SetPinDirection+0x26>
  e4:	68 c1       	rjmp	.+720    	; 0x3b6 <DIO_u8SetPinDirection+0x2f6>
		switch (Copy_u8PortId) {
  e6:	8a 81       	ldd	r24, Y+2	; 0x02
  e8:	28 2f       	mov	r18, r24
  ea:	30 e0       	ldi	r19, 0x00	; 0
  ec:	3e 87       	std	Y+14, r19	; 0x0e
  ee:	2d 87       	std	Y+13, r18	; 0x0d
  f0:	8d 85       	ldd	r24, Y+13	; 0x0d
  f2:	9e 85       	ldd	r25, Y+14	; 0x0e
  f4:	81 30       	cpi	r24, 0x01	; 1
  f6:	91 05       	cpc	r25, r1
  f8:	09 f4       	brne	.+2      	; 0xfc <DIO_u8SetPinDirection+0x3c>
  fa:	68 c0       	rjmp	.+208    	; 0x1cc <DIO_u8SetPinDirection+0x10c>
  fc:	2d 85       	ldd	r18, Y+13	; 0x0d
  fe:	3e 85       	ldd	r19, Y+14	; 0x0e
 100:	22 30       	cpi	r18, 0x02	; 2
 102:	31 05       	cpc	r19, r1
 104:	2c f4       	brge	.+10     	; 0x110 <DIO_u8SetPinDirection+0x50>
 106:	8d 85       	ldd	r24, Y+13	; 0x0d
 108:	9e 85       	ldd	r25, Y+14	; 0x0e
 10a:	00 97       	sbiw	r24, 0x00	; 0
 10c:	71 f0       	breq	.+28     	; 0x12a <DIO_u8SetPinDirection+0x6a>
 10e:	51 c1       	rjmp	.+674    	; 0x3b2 <DIO_u8SetPinDirection+0x2f2>
 110:	2d 85       	ldd	r18, Y+13	; 0x0d
 112:	3e 85       	ldd	r19, Y+14	; 0x0e
 114:	22 30       	cpi	r18, 0x02	; 2
 116:	31 05       	cpc	r19, r1
 118:	09 f4       	brne	.+2      	; 0x11c <DIO_u8SetPinDirection+0x5c>
 11a:	a9 c0       	rjmp	.+338    	; 0x26e <DIO_u8SetPinDirection+0x1ae>
 11c:	8d 85       	ldd	r24, Y+13	; 0x0d
 11e:	9e 85       	ldd	r25, Y+14	; 0x0e
 120:	83 30       	cpi	r24, 0x03	; 3
 122:	91 05       	cpc	r25, r1
 124:	09 f4       	brne	.+2      	; 0x128 <DIO_u8SetPinDirection+0x68>
 126:	f4 c0       	rjmp	.+488    	; 0x310 <DIO_u8SetPinDirection+0x250>
 128:	44 c1       	rjmp	.+648    	; 0x3b2 <DIO_u8SetPinDirection+0x2f2>
		case DIO_u8_PORTA:
			switch (Copy_u8PinDirection) {
 12a:	8c 81       	ldd	r24, Y+4	; 0x04
 12c:	28 2f       	mov	r18, r24
 12e:	30 e0       	ldi	r19, 0x00	; 0
 130:	3c 87       	std	Y+12, r19	; 0x0c
 132:	2b 87       	std	Y+11, r18	; 0x0b
 134:	8b 85       	ldd	r24, Y+11	; 0x0b
 136:	9c 85       	ldd	r25, Y+12	; 0x0c
 138:	81 30       	cpi	r24, 0x01	; 1
 13a:	91 05       	cpc	r25, r1
 13c:	89 f1       	breq	.+98     	; 0x1a0 <DIO_u8SetPinDirection+0xe0>
 13e:	2b 85       	ldd	r18, Y+11	; 0x0b
 140:	3c 85       	ldd	r19, Y+12	; 0x0c
 142:	22 30       	cpi	r18, 0x02	; 2
 144:	31 05       	cpc	r19, r1
 146:	29 f0       	breq	.+10     	; 0x152 <DIO_u8SetPinDirection+0x92>
 148:	8b 85       	ldd	r24, Y+11	; 0x0b
 14a:	9c 85       	ldd	r25, Y+12	; 0x0c
 14c:	00 97       	sbiw	r24, 0x00	; 0
 14e:	99 f0       	breq	.+38     	; 0x176 <DIO_u8SetPinDirection+0xb6>
 150:	3b c0       	rjmp	.+118    	; 0x1c8 <DIO_u8SetPinDirection+0x108>
			case DIO_u8_INPUT_PULLUP:
				SET_BIT(DIO_u8_PORTA_REG, Copy_u8PinId);
 152:	ab e3       	ldi	r26, 0x3B	; 59
 154:	b0 e0       	ldi	r27, 0x00	; 0
 156:	eb e3       	ldi	r30, 0x3B	; 59
 158:	f0 e0       	ldi	r31, 0x00	; 0
 15a:	80 81       	ld	r24, Z
 15c:	48 2f       	mov	r20, r24
 15e:	8b 81       	ldd	r24, Y+3	; 0x03
 160:	28 2f       	mov	r18, r24
 162:	30 e0       	ldi	r19, 0x00	; 0
 164:	81 e0       	ldi	r24, 0x01	; 1
 166:	90 e0       	ldi	r25, 0x00	; 0
 168:	02 c0       	rjmp	.+4      	; 0x16e <DIO_u8SetPinDirection+0xae>
 16a:	88 0f       	add	r24, r24
 16c:	99 1f       	adc	r25, r25
 16e:	2a 95       	dec	r18
 170:	e2 f7       	brpl	.-8      	; 0x16a <DIO_u8SetPinDirection+0xaa>
 172:	84 2b       	or	r24, r20
 174:	8c 93       	st	X, r24
			case DIO_u8_INPUT_FLOATING:
				CLR_BIT(DIO_u8_DDRA_REG, Copy_u8PinId);
 176:	aa e3       	ldi	r26, 0x3A	; 58
 178:	b0 e0       	ldi	r27, 0x00	; 0
 17a:	ea e3       	ldi	r30, 0x3A	; 58
 17c:	f0 e0       	ldi	r31, 0x00	; 0
 17e:	80 81       	ld	r24, Z
 180:	48 2f       	mov	r20, r24
 182:	8b 81       	ldd	r24, Y+3	; 0x03
 184:	28 2f       	mov	r18, r24
 186:	30 e0       	ldi	r19, 0x00	; 0
 188:	81 e0       	ldi	r24, 0x01	; 1
 18a:	90 e0       	ldi	r25, 0x00	; 0
 18c:	02 2e       	mov	r0, r18
 18e:	02 c0       	rjmp	.+4      	; 0x194 <DIO_u8SetPinDirection+0xd4>
 190:	88 0f       	add	r24, r24
 192:	99 1f       	adc	r25, r25
 194:	0a 94       	dec	r0
 196:	e2 f7       	brpl	.-8      	; 0x190 <DIO_u8SetPinDirection+0xd0>
 198:	80 95       	com	r24
 19a:	84 23       	and	r24, r20
 19c:	8c 93       	st	X, r24
 19e:	0c c1       	rjmp	.+536    	; 0x3b8 <DIO_u8SetPinDirection+0x2f8>
				break;
			case DIO_u8_OUTPUT:
				SET_BIT(DIO_u8_DDRA_REG, Copy_u8PinId);
 1a0:	aa e3       	ldi	r26, 0x3A	; 58
 1a2:	b0 e0       	ldi	r27, 0x00	; 0
 1a4:	ea e3       	ldi	r30, 0x3A	; 58
 1a6:	f0 e0       	ldi	r31, 0x00	; 0
 1a8:	80 81       	ld	r24, Z
 1aa:	48 2f       	mov	r20, r24
 1ac:	8b 81       	ldd	r24, Y+3	; 0x03
 1ae:	28 2f       	mov	r18, r24
 1b0:	30 e0       	ldi	r19, 0x00	; 0
 1b2:	81 e0       	ldi	r24, 0x01	; 1
 1b4:	90 e0       	ldi	r25, 0x00	; 0
 1b6:	02 2e       	mov	r0, r18
 1b8:	02 c0       	rjmp	.+4      	; 0x1be <DIO_u8SetPinDirection+0xfe>
 1ba:	88 0f       	add	r24, r24
 1bc:	99 1f       	adc	r25, r25
 1be:	0a 94       	dec	r0
 1c0:	e2 f7       	brpl	.-8      	; 0x1ba <DIO_u8SetPinDirection+0xfa>
 1c2:	84 2b       	or	r24, r20
 1c4:	8c 93       	st	X, r24
 1c6:	f8 c0       	rjmp	.+496    	; 0x3b8 <DIO_u8SetPinDirection+0x2f8>
				break;
			default:
				Local_u8ErrorState = STD_TYPES_NOK;
 1c8:	19 82       	std	Y+1, r1	; 0x01
 1ca:	f6 c0       	rjmp	.+492    	; 0x3b8 <DIO_u8SetPinDirection+0x2f8>
			}
			break;
		case DIO_u8_PORTB:
			switch (Copy_u8PinDirection) {
 1cc:	8c 81       	ldd	r24, Y+4	; 0x04
 1ce:	28 2f       	mov	r18, r24
 1d0:	30 e0       	ldi	r19, 0x00	; 0
 1d2:	3a 87       	std	Y+10, r19	; 0x0a
 1d4:	29 87       	std	Y+9, r18	; 0x09
 1d6:	89 85       	ldd	r24, Y+9	; 0x09
 1d8:	9a 85       	ldd	r25, Y+10	; 0x0a
 1da:	81 30       	cpi	r24, 0x01	; 1
 1dc:	91 05       	cpc	r25, r1
 1de:	89 f1       	breq	.+98     	; 0x242 <DIO_u8SetPinDirection+0x182>
 1e0:	29 85       	ldd	r18, Y+9	; 0x09
 1e2:	3a 85       	ldd	r19, Y+10	; 0x0a
 1e4:	22 30       	cpi	r18, 0x02	; 2
 1e6:	31 05       	cpc	r19, r1
 1e8:	29 f0       	breq	.+10     	; 0x1f4 <DIO_u8SetPinDirection+0x134>
 1ea:	89 85       	ldd	r24, Y+9	; 0x09
 1ec:	9a 85       	ldd	r25, Y+10	; 0x0a
 1ee:	00 97       	sbiw	r24, 0x00	; 0
 1f0:	99 f0       	breq	.+38     	; 0x218 <DIO_u8SetPinDirection+0x158>
 1f2:	3b c0       	rjmp	.+118    	; 0x26a <DIO_u8SetPinDirection+0x1aa>
			case DIO_u8_INPUT_PULLUP:
				SET_BIT(DIO_u8_PORTB_REG, Copy_u8PinId);
 1f4:	a8 e3       	ldi	r26, 0x38	; 56
 1f6:	b0 e0       	ldi	r27, 0x00	; 0
 1f8:	e8 e3       	ldi	r30, 0x38	; 56
 1fa:	f0 e0       	ldi	r31, 0x00	; 0
 1fc:	80 81       	ld	r24, Z
 1fe:	48 2f       	mov	r20, r24
 200:	8b 81       	ldd	r24, Y+3	; 0x03
 202:	28 2f       	mov	r18, r24
 204:	30 e0       	ldi	r19, 0x00	; 0
 206:	81 e0       	ldi	r24, 0x01	; 1
 208:	90 e0       	ldi	r25, 0x00	; 0
 20a:	02 c0       	rjmp	.+4      	; 0x210 <DIO_u8SetPinDirection+0x150>
 20c:	88 0f       	add	r24, r24
 20e:	99 1f       	adc	r25, r25
 210:	2a 95       	dec	r18
 212:	e2 f7       	brpl	.-8      	; 0x20c <DIO_u8SetPinDirection+0x14c>
 214:	84 2b       	or	r24, r20
 216:	8c 93       	st	X, r24
			case DIO_u8_INPUT_FLOATING:
				CLR_BIT(DIO_u8_DDRB_REG, Copy_u8PinId);
 218:	a7 e3       	ldi	r26, 0x37	; 55
 21a:	b0 e0       	ldi	r27, 0x00	; 0
 21c:	e7 e3       	ldi	r30, 0x37	; 55
 21e:	f0 e0       	ldi	r31, 0x00	; 0
 220:	80 81       	ld	r24, Z
 222:	48 2f       	mov	r20, r24
 224:	8b 81       	ldd	r24, Y+3	; 0x03
 226:	28 2f       	mov	r18, r24
 228:	30 e0       	ldi	r19, 0x00	; 0
 22a:	81 e0       	ldi	r24, 0x01	; 1
 22c:	90 e0       	ldi	r25, 0x00	; 0
 22e:	02 2e       	mov	r0, r18
 230:	02 c0       	rjmp	.+4      	; 0x236 <DIO_u8SetPinDirection+0x176>
 232:	88 0f       	add	r24, r24
 234:	99 1f       	adc	r25, r25
 236:	0a 94       	dec	r0
 238:	e2 f7       	brpl	.-8      	; 0x232 <DIO_u8SetPinDirection+0x172>
 23a:	80 95       	com	r24
 23c:	84 23       	and	r24, r20
 23e:	8c 93       	st	X, r24
 240:	bb c0       	rjmp	.+374    	; 0x3b8 <DIO_u8SetPinDirection+0x2f8>
				break;
			case DIO_u8_OUTPUT:
				SET_BIT(DIO_u8_DDRB_REG, Copy_u8PinId);
 242:	a7 e3       	ldi	r26, 0x37	; 55
 244:	b0 e0       	ldi	r27, 0x00	; 0
 246:	e7 e3       	ldi	r30, 0x37	; 55
 248:	f0 e0       	ldi	r31, 0x00	; 0
 24a:	80 81       	ld	r24, Z
 24c:	48 2f       	mov	r20, r24
 24e:	8b 81       	ldd	r24, Y+3	; 0x03
 250:	28 2f       	mov	r18, r24
 252:	30 e0       	ldi	r19, 0x00	; 0
 254:	81 e0       	ldi	r24, 0x01	; 1
 256:	90 e0       	ldi	r25, 0x00	; 0
 258:	02 2e       	mov	r0, r18
 25a:	02 c0       	rjmp	.+4      	; 0x260 <DIO_u8SetPinDirection+0x1a0>
 25c:	88 0f       	add	r24, r24
 25e:	99 1f       	adc	r25, r25
 260:	0a 94       	dec	r0
 262:	e2 f7       	brpl	.-8      	; 0x25c <DIO_u8SetPinDirection+0x19c>
 264:	84 2b       	or	r24, r20
 266:	8c 93       	st	X, r24
 268:	a7 c0       	rjmp	.+334    	; 0x3b8 <DIO_u8SetPinDirection+0x2f8>
				break;
			default:
				Local_u8ErrorState = STD_TYPES_NOK;
 26a:	19 82       	std	Y+1, r1	; 0x01
 26c:	a5 c0       	rjmp	.+330    	; 0x3b8 <DIO_u8SetPinDirection+0x2f8>
			}
			break;
		case DIO_u8_PORTC:
			switch (Copy_u8PinDirection) {
 26e:	8c 81       	ldd	r24, Y+4	; 0x04
 270:	28 2f       	mov	r18, r24
 272:	30 e0       	ldi	r19, 0x00	; 0
 274:	38 87       	std	Y+8, r19	; 0x08
 276:	2f 83       	std	Y+7, r18	; 0x07
 278:	8f 81       	ldd	r24, Y+7	; 0x07
 27a:	98 85       	ldd	r25, Y+8	; 0x08
 27c:	81 30       	cpi	r24, 0x01	; 1
 27e:	91 05       	cpc	r25, r1
 280:	89 f1       	breq	.+98     	; 0x2e4 <DIO_u8SetPinDirection+0x224>
 282:	2f 81       	ldd	r18, Y+7	; 0x07
 284:	38 85       	ldd	r19, Y+8	; 0x08
 286:	22 30       	cpi	r18, 0x02	; 2
 288:	31 05       	cpc	r19, r1
 28a:	29 f0       	breq	.+10     	; 0x296 <DIO_u8SetPinDirection+0x1d6>
 28c:	8f 81       	ldd	r24, Y+7	; 0x07
 28e:	98 85       	ldd	r25, Y+8	; 0x08
 290:	00 97       	sbiw	r24, 0x00	; 0
 292:	99 f0       	breq	.+38     	; 0x2ba <DIO_u8SetPinDirection+0x1fa>
 294:	3b c0       	rjmp	.+118    	; 0x30c <DIO_u8SetPinDirection+0x24c>
			case DIO_u8_INPUT_PULLUP:
				SET_BIT(DIO_u8_PORTC_REG, Copy_u8PinId);
 296:	a5 e3       	ldi	r26, 0x35	; 53
 298:	b0 e0       	ldi	r27, 0x00	; 0
 29a:	e5 e3       	ldi	r30, 0x35	; 53
 29c:	f0 e0       	ldi	r31, 0x00	; 0
 29e:	80 81       	ld	r24, Z
 2a0:	48 2f       	mov	r20, r24
 2a2:	8b 81       	ldd	r24, Y+3	; 0x03
 2a4:	28 2f       	mov	r18, r24
 2a6:	30 e0       	ldi	r19, 0x00	; 0
 2a8:	81 e0       	ldi	r24, 0x01	; 1
 2aa:	90 e0       	ldi	r25, 0x00	; 0
 2ac:	02 c0       	rjmp	.+4      	; 0x2b2 <DIO_u8SetPinDirection+0x1f2>
 2ae:	88 0f       	add	r24, r24
 2b0:	99 1f       	adc	r25, r25
 2b2:	2a 95       	dec	r18
 2b4:	e2 f7       	brpl	.-8      	; 0x2ae <DIO_u8SetPinDirection+0x1ee>
 2b6:	84 2b       	or	r24, r20
 2b8:	8c 93       	st	X, r24
			case DIO_u8_INPUT_FLOATING:
				CLR_BIT(DIO_u8_DDRC_REG, Copy_u8PinId);
 2ba:	a4 e3       	ldi	r26, 0x34	; 52
 2bc:	b0 e0       	ldi	r27, 0x00	; 0
 2be:	e4 e3       	ldi	r30, 0x34	; 52
 2c0:	f0 e0       	ldi	r31, 0x00	; 0
 2c2:	80 81       	ld	r24, Z
 2c4:	48 2f       	mov	r20, r24
 2c6:	8b 81       	ldd	r24, Y+3	; 0x03
 2c8:	28 2f       	mov	r18, r24
 2ca:	30 e0       	ldi	r19, 0x00	; 0
 2cc:	81 e0       	ldi	r24, 0x01	; 1
 2ce:	90 e0       	ldi	r25, 0x00	; 0
 2d0:	02 2e       	mov	r0, r18
 2d2:	02 c0       	rjmp	.+4      	; 0x2d8 <DIO_u8SetPinDirection+0x218>
 2d4:	88 0f       	add	r24, r24
 2d6:	99 1f       	adc	r25, r25
 2d8:	0a 94       	dec	r0
 2da:	e2 f7       	brpl	.-8      	; 0x2d4 <DIO_u8SetPinDirection+0x214>
 2dc:	80 95       	com	r24
 2de:	84 23       	and	r24, r20
 2e0:	8c 93       	st	X, r24
 2e2:	6a c0       	rjmp	.+212    	; 0x3b8 <DIO_u8SetPinDirection+0x2f8>
				break;
			case DIO_u8_OUTPUT:
				SET_BIT(DIO_u8_DDRC_REG, Copy_u8PinId);
 2e4:	a4 e3       	ldi	r26, 0x34	; 52
 2e6:	b0 e0       	ldi	r27, 0x00	; 0
 2e8:	e4 e3       	ldi	r30, 0x34	; 52
 2ea:	f0 e0       	ldi	r31, 0x00	; 0
 2ec:	80 81       	ld	r24, Z
 2ee:	48 2f       	mov	r20, r24
 2f0:	8b 81       	ldd	r24, Y+3	; 0x03
 2f2:	28 2f       	mov	r18, r24
 2f4:	30 e0       	ldi	r19, 0x00	; 0
 2f6:	81 e0       	ldi	r24, 0x01	; 1
 2f8:	90 e0       	ldi	r25, 0x00	; 0
 2fa:	02 2e       	mov	r0, r18
 2fc:	02 c0       	rjmp	.+4      	; 0x302 <DIO_u8SetPinDirection+0x242>
 2fe:	88 0f       	add	r24, r24
 300:	99 1f       	adc	r25, r25
 302:	0a 94       	dec	r0
 304:	e2 f7       	brpl	.-8      	; 0x2fe <DIO_u8SetPinDirection+0x23e>
 306:	84 2b       	or	r24, r20
 308:	8c 93       	st	X, r24
 30a:	56 c0       	rjmp	.+172    	; 0x3b8 <DIO_u8SetPinDirection+0x2f8>
				break;
			default:
				Local_u8ErrorState = STD_TYPES_NOK;
 30c:	19 82       	std	Y+1, r1	; 0x01
 30e:	54 c0       	rjmp	.+168    	; 0x3b8 <DIO_u8SetPinDirection+0x2f8>
			}
			break;
		case DIO_u8_PORTD:
			switch (Copy_u8PinDirection) {
 310:	8c 81       	ldd	r24, Y+4	; 0x04
 312:	28 2f       	mov	r18, r24
 314:	30 e0       	ldi	r19, 0x00	; 0
 316:	3e 83       	std	Y+6, r19	; 0x06
 318:	2d 83       	std	Y+5, r18	; 0x05
 31a:	8d 81       	ldd	r24, Y+5	; 0x05
 31c:	9e 81       	ldd	r25, Y+6	; 0x06
 31e:	81 30       	cpi	r24, 0x01	; 1
 320:	91 05       	cpc	r25, r1
 322:	89 f1       	breq	.+98     	; 0x386 <DIO_u8SetPinDirection+0x2c6>
 324:	2d 81       	ldd	r18, Y+5	; 0x05
 326:	3e 81       	ldd	r19, Y+6	; 0x06
 328:	22 30       	cpi	r18, 0x02	; 2
 32a:	31 05       	cpc	r19, r1
 32c:	29 f0       	breq	.+10     	; 0x338 <DIO_u8SetPinDirection+0x278>
 32e:	8d 81       	ldd	r24, Y+5	; 0x05
 330:	9e 81       	ldd	r25, Y+6	; 0x06
 332:	00 97       	sbiw	r24, 0x00	; 0
 334:	99 f0       	breq	.+38     	; 0x35c <DIO_u8SetPinDirection+0x29c>
 336:	3b c0       	rjmp	.+118    	; 0x3ae <DIO_u8SetPinDirection+0x2ee>
			case DIO_u8_INPUT_PULLUP:
				SET_BIT(DIO_u8_PORTD_REG, Copy_u8PinId);
 338:	a2 e3       	ldi	r26, 0x32	; 50
 33a:	b0 e0       	ldi	r27, 0x00	; 0
 33c:	e2 e3       	ldi	r30, 0x32	; 50
 33e:	f0 e0       	ldi	r31, 0x00	; 0
 340:	80 81       	ld	r24, Z
 342:	48 2f       	mov	r20, r24
 344:	8b 81       	ldd	r24, Y+3	; 0x03
 346:	28 2f       	mov	r18, r24
 348:	30 e0       	ldi	r19, 0x00	; 0
 34a:	81 e0       	ldi	r24, 0x01	; 1
 34c:	90 e0       	ldi	r25, 0x00	; 0
 34e:	02 c0       	rjmp	.+4      	; 0x354 <DIO_u8SetPinDirection+0x294>
 350:	88 0f       	add	r24, r24
 352:	99 1f       	adc	r25, r25
 354:	2a 95       	dec	r18
 356:	e2 f7       	brpl	.-8      	; 0x350 <DIO_u8SetPinDirection+0x290>
 358:	84 2b       	or	r24, r20
 35a:	8c 93       	st	X, r24
			case DIO_u8_INPUT_FLOATING:
				CLR_BIT(DIO_u8_DDRD_REG, Copy_u8PinId);
 35c:	a1 e3       	ldi	r26, 0x31	; 49
 35e:	b0 e0       	ldi	r27, 0x00	; 0
 360:	e1 e3       	ldi	r30, 0x31	; 49
 362:	f0 e0       	ldi	r31, 0x00	; 0
 364:	80 81       	ld	r24, Z
 366:	48 2f       	mov	r20, r24
 368:	8b 81       	ldd	r24, Y+3	; 0x03
 36a:	28 2f       	mov	r18, r24
 36c:	30 e0       	ldi	r19, 0x00	; 0
 36e:	81 e0       	ldi	r24, 0x01	; 1
 370:	90 e0       	ldi	r25, 0x00	; 0
 372:	02 2e       	mov	r0, r18
 374:	02 c0       	rjmp	.+4      	; 0x37a <DIO_u8SetPinDirection+0x2ba>
 376:	88 0f       	add	r24, r24
 378:	99 1f       	adc	r25, r25
 37a:	0a 94       	dec	r0
 37c:	e2 f7       	brpl	.-8      	; 0x376 <DIO_u8SetPinDirection+0x2b6>
 37e:	80 95       	com	r24
 380:	84 23       	and	r24, r20
 382:	8c 93       	st	X, r24
 384:	19 c0       	rjmp	.+50     	; 0x3b8 <DIO_u8SetPinDirection+0x2f8>
				break;
			case DIO_u8_OUTPUT:
				SET_BIT(DIO_u8_DDRD_REG, Copy_u8PinId);
 386:	a1 e3       	ldi	r26, 0x31	; 49
 388:	b0 e0       	ldi	r27, 0x00	; 0
 38a:	e1 e3       	ldi	r30, 0x31	; 49
 38c:	f0 e0       	ldi	r31, 0x00	; 0
 38e:	80 81       	ld	r24, Z
 390:	48 2f       	mov	r20, r24
 392:	8b 81       	ldd	r24, Y+3	; 0x03
 394:	28 2f       	mov	r18, r24
 396:	30 e0       	ldi	r19, 0x00	; 0
 398:	81 e0       	ldi	r24, 0x01	; 1
 39a:	90 e0       	ldi	r25, 0x00	; 0
 39c:	02 2e       	mov	r0, r18
 39e:	02 c0       	rjmp	.+4      	; 0x3a4 <DIO_u8SetPinDirection+0x2e4>
 3a0:	88 0f       	add	r24, r24
 3a2:	99 1f       	adc	r25, r25
 3a4:	0a 94       	dec	r0
 3a6:	e2 f7       	brpl	.-8      	; 0x3a0 <DIO_u8SetPinDirection+0x2e0>
 3a8:	84 2b       	or	r24, r20
 3aa:	8c 93       	st	X, r24
 3ac:	05 c0       	rjmp	.+10     	; 0x3b8 <DIO_u8SetPinDirection+0x2f8>
				break;
			default:
				Local_u8ErrorState = STD_TYPES_NOK;
 3ae:	19 82       	std	Y+1, r1	; 0x01
 3b0:	03 c0       	rjmp	.+6      	; 0x3b8 <DIO_u8SetPinDirection+0x2f8>
			}
			break;
		default:
			Local_u8ErrorState = STD_TYPES_NOK;
 3b2:	19 82       	std	Y+1, r1	; 0x01
 3b4:	01 c0       	rjmp	.+2      	; 0x3b8 <DIO_u8SetPinDirection+0x2f8>
		}
	} else
		Local_u8ErrorState = STD_TYPES_NOK;
 3b6:	19 82       	std	Y+1, r1	; 0x01
	return Local_u8ErrorState;
 3b8:	89 81       	ldd	r24, Y+1	; 0x01
}
 3ba:	2e 96       	adiw	r28, 0x0e	; 14
 3bc:	0f b6       	in	r0, 0x3f	; 63
 3be:	f8 94       	cli
 3c0:	de bf       	out	0x3e, r29	; 62
 3c2:	0f be       	out	0x3f, r0	; 63
 3c4:	cd bf       	out	0x3d, r28	; 61
 3c6:	cf 91       	pop	r28
 3c8:	df 91       	pop	r29
 3ca:	08 95       	ret

000003cc <DIO_u8SetPortDirection>:
u8 DIO_u8SetPortDirection(u8 Copy_u8PortId, u8 Copy_u8PortDirection) {
 3cc:	df 93       	push	r29
 3ce:	cf 93       	push	r28
 3d0:	cd b7       	in	r28, 0x3d	; 61
 3d2:	de b7       	in	r29, 0x3e	; 62
 3d4:	2d 97       	sbiw	r28, 0x0d	; 13
 3d6:	0f b6       	in	r0, 0x3f	; 63
 3d8:	f8 94       	cli
 3da:	de bf       	out	0x3e, r29	; 62
 3dc:	0f be       	out	0x3f, r0	; 63
 3de:	cd bf       	out	0x3d, r28	; 61
 3e0:	8a 83       	std	Y+2, r24	; 0x02
 3e2:	6b 83       	std	Y+3, r22	; 0x03
	u8 Local_u8ErrorState = STD_TYPES_OK;
 3e4:	81 e0       	ldi	r24, 0x01	; 1
 3e6:	89 83       	std	Y+1, r24	; 0x01
	switch (Copy_u8PortId) {
 3e8:	8a 81       	ldd	r24, Y+2	; 0x02
 3ea:	28 2f       	mov	r18, r24
 3ec:	30 e0       	ldi	r19, 0x00	; 0
 3ee:	3d 87       	std	Y+13, r19	; 0x0d
 3f0:	2c 87       	std	Y+12, r18	; 0x0c
 3f2:	8c 85       	ldd	r24, Y+12	; 0x0c
 3f4:	9d 85       	ldd	r25, Y+13	; 0x0d
 3f6:	81 30       	cpi	r24, 0x01	; 1
 3f8:	91 05       	cpc	r25, r1
 3fa:	d1 f1       	breq	.+116    	; 0x470 <DIO_u8SetPortDirection+0xa4>
 3fc:	2c 85       	ldd	r18, Y+12	; 0x0c
 3fe:	3d 85       	ldd	r19, Y+13	; 0x0d
 400:	22 30       	cpi	r18, 0x02	; 2
 402:	31 05       	cpc	r19, r1
 404:	2c f4       	brge	.+10     	; 0x410 <DIO_u8SetPortDirection+0x44>
 406:	8c 85       	ldd	r24, Y+12	; 0x0c
 408:	9d 85       	ldd	r25, Y+13	; 0x0d
 40a:	00 97       	sbiw	r24, 0x00	; 0
 40c:	71 f0       	breq	.+28     	; 0x42a <DIO_u8SetPortDirection+0x5e>
 40e:	99 c0       	rjmp	.+306    	; 0x542 <DIO_u8SetPortDirection+0x176>
 410:	2c 85       	ldd	r18, Y+12	; 0x0c
 412:	3d 85       	ldd	r19, Y+13	; 0x0d
 414:	22 30       	cpi	r18, 0x02	; 2
 416:	31 05       	cpc	r19, r1
 418:	09 f4       	brne	.+2      	; 0x41c <DIO_u8SetPortDirection+0x50>
 41a:	4d c0       	rjmp	.+154    	; 0x4b6 <DIO_u8SetPortDirection+0xea>
 41c:	8c 85       	ldd	r24, Y+12	; 0x0c
 41e:	9d 85       	ldd	r25, Y+13	; 0x0d
 420:	83 30       	cpi	r24, 0x03	; 3
 422:	91 05       	cpc	r25, r1
 424:	09 f4       	brne	.+2      	; 0x428 <DIO_u8SetPortDirection+0x5c>
 426:	6a c0       	rjmp	.+212    	; 0x4fc <DIO_u8SetPortDirection+0x130>
 428:	8c c0       	rjmp	.+280    	; 0x542 <DIO_u8SetPortDirection+0x176>
	case DIO_u8_PORTA:
		switch (Copy_u8PortDirection) {
 42a:	8b 81       	ldd	r24, Y+3	; 0x03
 42c:	28 2f       	mov	r18, r24
 42e:	30 e0       	ldi	r19, 0x00	; 0
 430:	3b 87       	std	Y+11, r19	; 0x0b
 432:	2a 87       	std	Y+10, r18	; 0x0a
 434:	8a 85       	ldd	r24, Y+10	; 0x0a
 436:	9b 85       	ldd	r25, Y+11	; 0x0b
 438:	81 30       	cpi	r24, 0x01	; 1
 43a:	91 05       	cpc	r25, r1
 43c:	91 f0       	breq	.+36     	; 0x462 <DIO_u8SetPortDirection+0x96>
 43e:	2a 85       	ldd	r18, Y+10	; 0x0a
 440:	3b 85       	ldd	r19, Y+11	; 0x0b
 442:	22 30       	cpi	r18, 0x02	; 2
 444:	31 05       	cpc	r19, r1
 446:	29 f0       	breq	.+10     	; 0x452 <DIO_u8SetPortDirection+0x86>
 448:	8a 85       	ldd	r24, Y+10	; 0x0a
 44a:	9b 85       	ldd	r25, Y+11	; 0x0b
 44c:	00 97       	sbiw	r24, 0x00	; 0
 44e:	29 f0       	breq	.+10     	; 0x45a <DIO_u8SetPortDirection+0x8e>
 450:	0d c0       	rjmp	.+26     	; 0x46c <DIO_u8SetPortDirection+0xa0>
		case DIO_u8_INPUT_PULLUP:
			DIO_u8_PORTA_REG = 0xff;
 452:	eb e3       	ldi	r30, 0x3B	; 59
 454:	f0 e0       	ldi	r31, 0x00	; 0
 456:	8f ef       	ldi	r24, 0xFF	; 255
 458:	80 83       	st	Z, r24
		case DIO_u8_INPUT_FLOATING:
			DIO_u8_DDRA_REG = 0x00;
 45a:	ea e3       	ldi	r30, 0x3A	; 58
 45c:	f0 e0       	ldi	r31, 0x00	; 0
 45e:	10 82       	st	Z, r1
 460:	71 c0       	rjmp	.+226    	; 0x544 <DIO_u8SetPortDirection+0x178>
			break;
		case DIO_u8_OUTPUT:
			DIO_u8_DDRA_REG = 0xff;
 462:	ea e3       	ldi	r30, 0x3A	; 58
 464:	f0 e0       	ldi	r31, 0x00	; 0
 466:	8f ef       	ldi	r24, 0xFF	; 255
 468:	80 83       	st	Z, r24
 46a:	6c c0       	rjmp	.+216    	; 0x544 <DIO_u8SetPortDirection+0x178>
			break;
		default:
			Local_u8ErrorState = STD_TYPES_NOK;
 46c:	19 82       	std	Y+1, r1	; 0x01
 46e:	6a c0       	rjmp	.+212    	; 0x544 <DIO_u8SetPortDirection+0x178>
		}
		break;
	case DIO_u8_PORTB:
		switch (Copy_u8PortDirection) {
 470:	8b 81       	ldd	r24, Y+3	; 0x03
 472:	28 2f       	mov	r18, r24
 474:	30 e0       	ldi	r19, 0x00	; 0
 476:	39 87       	std	Y+9, r19	; 0x09
 478:	28 87       	std	Y+8, r18	; 0x08
 47a:	88 85       	ldd	r24, Y+8	; 0x08
 47c:	99 85       	ldd	r25, Y+9	; 0x09
 47e:	81 30       	cpi	r24, 0x01	; 1
 480:	91 05       	cpc	r25, r1
 482:	91 f0       	breq	.+36     	; 0x4a8 <DIO_u8SetPortDirection+0xdc>
 484:	28 85       	ldd	r18, Y+8	; 0x08
 486:	39 85       	ldd	r19, Y+9	; 0x09
 488:	22 30       	cpi	r18, 0x02	; 2
 48a:	31 05       	cpc	r19, r1
 48c:	29 f0       	breq	.+10     	; 0x498 <DIO_u8SetPortDirection+0xcc>
 48e:	88 85       	ldd	r24, Y+8	; 0x08
 490:	99 85       	ldd	r25, Y+9	; 0x09
 492:	00 97       	sbiw	r24, 0x00	; 0
 494:	29 f0       	breq	.+10     	; 0x4a0 <DIO_u8SetPortDirection+0xd4>
 496:	0d c0       	rjmp	.+26     	; 0x4b2 <DIO_u8SetPortDirection+0xe6>
		case DIO_u8_INPUT_PULLUP:
			DIO_u8_PORTB_REG = 255;
 498:	e8 e3       	ldi	r30, 0x38	; 56
 49a:	f0 e0       	ldi	r31, 0x00	; 0
 49c:	8f ef       	ldi	r24, 0xFF	; 255
 49e:	80 83       	st	Z, r24
		case DIO_u8_INPUT_FLOATING:
			DIO_u8_DDRB_REG = 0;
 4a0:	e7 e3       	ldi	r30, 0x37	; 55
 4a2:	f0 e0       	ldi	r31, 0x00	; 0
 4a4:	10 82       	st	Z, r1
 4a6:	4e c0       	rjmp	.+156    	; 0x544 <DIO_u8SetPortDirection+0x178>
			break;
		case DIO_u8_OUTPUT:
			DIO_u8_DDRB_REG = 255;
 4a8:	e7 e3       	ldi	r30, 0x37	; 55
 4aa:	f0 e0       	ldi	r31, 0x00	; 0
 4ac:	8f ef       	ldi	r24, 0xFF	; 255
 4ae:	80 83       	st	Z, r24
 4b0:	49 c0       	rjmp	.+146    	; 0x544 <DIO_u8SetPortDirection+0x178>
			break;
		default:
			Local_u8ErrorState = STD_TYPES_NOK;
 4b2:	19 82       	std	Y+1, r1	; 0x01
 4b4:	47 c0       	rjmp	.+142    	; 0x544 <DIO_u8SetPortDirection+0x178>
		}
		break;
	case DIO_u8_PORTC:
		switch (Copy_u8PortDirection) {
 4b6:	8b 81       	ldd	r24, Y+3	; 0x03
 4b8:	28 2f       	mov	r18, r24
 4ba:	30 e0       	ldi	r19, 0x00	; 0
 4bc:	3f 83       	std	Y+7, r19	; 0x07
 4be:	2e 83       	std	Y+6, r18	; 0x06
 4c0:	8e 81       	ldd	r24, Y+6	; 0x06
 4c2:	9f 81       	ldd	r25, Y+7	; 0x07
 4c4:	81 30       	cpi	r24, 0x01	; 1
 4c6:	91 05       	cpc	r25, r1
 4c8:	91 f0       	breq	.+36     	; 0x4ee <DIO_u8SetPortDirection+0x122>
 4ca:	2e 81       	ldd	r18, Y+6	; 0x06
 4cc:	3f 81       	ldd	r19, Y+7	; 0x07
 4ce:	22 30       	cpi	r18, 0x02	; 2
 4d0:	31 05       	cpc	r19, r1
 4d2:	29 f0       	breq	.+10     	; 0x4de <DIO_u8SetPortDirection+0x112>
 4d4:	8e 81       	ldd	r24, Y+6	; 0x06
 4d6:	9f 81       	ldd	r25, Y+7	; 0x07
 4d8:	00 97       	sbiw	r24, 0x00	; 0
 4da:	29 f0       	breq	.+10     	; 0x4e6 <DIO_u8SetPortDirection+0x11a>
 4dc:	0d c0       	rjmp	.+26     	; 0x4f8 <DIO_u8SetPortDirection+0x12c>
		case DIO_u8_INPUT_PULLUP:
			DIO_u8_PORTC_REG = 255;
 4de:	e5 e3       	ldi	r30, 0x35	; 53
 4e0:	f0 e0       	ldi	r31, 0x00	; 0
 4e2:	8f ef       	ldi	r24, 0xFF	; 255
 4e4:	80 83       	st	Z, r24
		case DIO_u8_INPUT_FLOATING:
			DIO_u8_DDRC_REG = 0;
 4e6:	e4 e3       	ldi	r30, 0x34	; 52
 4e8:	f0 e0       	ldi	r31, 0x00	; 0
 4ea:	10 82       	st	Z, r1
 4ec:	2b c0       	rjmp	.+86     	; 0x544 <DIO_u8SetPortDirection+0x178>
			break;
		case DIO_u8_OUTPUT:
			DIO_u8_DDRC_REG = 255;
 4ee:	e4 e3       	ldi	r30, 0x34	; 52
 4f0:	f0 e0       	ldi	r31, 0x00	; 0
 4f2:	8f ef       	ldi	r24, 0xFF	; 255
 4f4:	80 83       	st	Z, r24
 4f6:	26 c0       	rjmp	.+76     	; 0x544 <DIO_u8SetPortDirection+0x178>
			break;
		default:
			Local_u8ErrorState = STD_TYPES_NOK;
 4f8:	19 82       	std	Y+1, r1	; 0x01
 4fa:	24 c0       	rjmp	.+72     	; 0x544 <DIO_u8SetPortDirection+0x178>
		}
		break;
	case DIO_u8_PORTD:
		switch (Copy_u8PortDirection) {
 4fc:	8b 81       	ldd	r24, Y+3	; 0x03
 4fe:	28 2f       	mov	r18, r24
 500:	30 e0       	ldi	r19, 0x00	; 0
 502:	3d 83       	std	Y+5, r19	; 0x05
 504:	2c 83       	std	Y+4, r18	; 0x04
 506:	8c 81       	ldd	r24, Y+4	; 0x04
 508:	9d 81       	ldd	r25, Y+5	; 0x05
 50a:	81 30       	cpi	r24, 0x01	; 1
 50c:	91 05       	cpc	r25, r1
 50e:	91 f0       	breq	.+36     	; 0x534 <DIO_u8SetPortDirection+0x168>
 510:	2c 81       	ldd	r18, Y+4	; 0x04
 512:	3d 81       	ldd	r19, Y+5	; 0x05
 514:	22 30       	cpi	r18, 0x02	; 2
 516:	31 05       	cpc	r19, r1
 518:	29 f0       	breq	.+10     	; 0x524 <DIO_u8SetPortDirection+0x158>
 51a:	8c 81       	ldd	r24, Y+4	; 0x04
 51c:	9d 81       	ldd	r25, Y+5	; 0x05
 51e:	00 97       	sbiw	r24, 0x00	; 0
 520:	29 f0       	breq	.+10     	; 0x52c <DIO_u8SetPortDirection+0x160>
 522:	0d c0       	rjmp	.+26     	; 0x53e <DIO_u8SetPortDirection+0x172>
		case DIO_u8_INPUT_PULLUP:
			DIO_u8_PORTD_REG = 255;
 524:	e2 e3       	ldi	r30, 0x32	; 50
 526:	f0 e0       	ldi	r31, 0x00	; 0
 528:	8f ef       	ldi	r24, 0xFF	; 255
 52a:	80 83       	st	Z, r24
		case DIO_u8_INPUT_FLOATING:
			DIO_u8_DDRD_REG = 0;
 52c:	e1 e3       	ldi	r30, 0x31	; 49
 52e:	f0 e0       	ldi	r31, 0x00	; 0
 530:	10 82       	st	Z, r1
 532:	08 c0       	rjmp	.+16     	; 0x544 <DIO_u8SetPortDirection+0x178>
			break;
		case DIO_u8_OUTPUT:
			DIO_u8_DDRD_REG = 255;
 534:	e1 e3       	ldi	r30, 0x31	; 49
 536:	f0 e0       	ldi	r31, 0x00	; 0
 538:	8f ef       	ldi	r24, 0xFF	; 255
 53a:	80 83       	st	Z, r24
 53c:	03 c0       	rjmp	.+6      	; 0x544 <DIO_u8SetPortDirection+0x178>
			break;
		default:
			Local_u8ErrorState = STD_TYPES_NOK;
 53e:	19 82       	std	Y+1, r1	; 0x01
 540:	01 c0       	rjmp	.+2      	; 0x544 <DIO_u8SetPortDirection+0x178>
		}
		break;
	default:
		Local_u8ErrorState = STD_TYPES_NOK;
 542:	19 82       	std	Y+1, r1	; 0x01
	}

	return Local_u8ErrorState;
 544:	89 81       	ldd	r24, Y+1	; 0x01
}
 546:	2d 96       	adiw	r28, 0x0d	; 13
 548:	0f b6       	in	r0, 0x3f	; 63
 54a:	f8 94       	cli
 54c:	de bf       	out	0x3e, r29	; 62
 54e:	0f be       	out	0x3f, r0	; 63
 550:	cd bf       	out	0x3d, r28	; 61
 552:	cf 91       	pop	r28
 554:	df 91       	pop	r29
 556:	08 95       	ret

00000558 <DIO_u8SetPinValue>:
u8 DIO_u8SetPinValue(u8 Copy_u8PortId, u8 Copy_u8PinId, u8 Copy_u8PinValue) {
 558:	df 93       	push	r29
 55a:	cf 93       	push	r28
 55c:	cd b7       	in	r28, 0x3d	; 61
 55e:	de b7       	in	r29, 0x3e	; 62
 560:	2e 97       	sbiw	r28, 0x0e	; 14
 562:	0f b6       	in	r0, 0x3f	; 63
 564:	f8 94       	cli
 566:	de bf       	out	0x3e, r29	; 62
 568:	0f be       	out	0x3f, r0	; 63
 56a:	cd bf       	out	0x3d, r28	; 61
 56c:	8a 83       	std	Y+2, r24	; 0x02
 56e:	6b 83       	std	Y+3, r22	; 0x03
 570:	4c 83       	std	Y+4, r20	; 0x04
	u8 Local_u8ErrorState = STD_TYPES_OK;
 572:	81 e0       	ldi	r24, 0x01	; 1
 574:	89 83       	std	Y+1, r24	; 0x01
	if ((Copy_u8PinId <= DIO_u8_PIN7)
 576:	8b 81       	ldd	r24, Y+3	; 0x03
 578:	88 30       	cpi	r24, 0x08	; 8
 57a:	08 f0       	brcs	.+2      	; 0x57e <DIO_u8SetPinValue+0x26>
 57c:	0a c1       	rjmp	.+532    	; 0x792 <DIO_u8SetPinValue+0x23a>
 57e:	8c 81       	ldd	r24, Y+4	; 0x04
 580:	81 30       	cpi	r24, 0x01	; 1
 582:	21 f0       	breq	.+8      	; 0x58c <DIO_u8SetPinValue+0x34>
 584:	8c 81       	ldd	r24, Y+4	; 0x04
 586:	88 23       	and	r24, r24
 588:	09 f0       	breq	.+2      	; 0x58c <DIO_u8SetPinValue+0x34>
 58a:	03 c1       	rjmp	.+518    	; 0x792 <DIO_u8SetPinValue+0x23a>
			&& ((Copy_u8PinValue == DIO_u8_HIGH)
					|| (Copy_u8PinValue == DIO_u8_LOW))) {
		switch (Copy_u8PortId) {
 58c:	8a 81       	ldd	r24, Y+2	; 0x02
 58e:	28 2f       	mov	r18, r24
 590:	30 e0       	ldi	r19, 0x00	; 0
 592:	3e 87       	std	Y+14, r19	; 0x0e
 594:	2d 87       	std	Y+13, r18	; 0x0d
 596:	8d 85       	ldd	r24, Y+13	; 0x0d
 598:	9e 85       	ldd	r25, Y+14	; 0x0e
 59a:	81 30       	cpi	r24, 0x01	; 1
 59c:	91 05       	cpc	r25, r1
 59e:	09 f4       	brne	.+2      	; 0x5a2 <DIO_u8SetPinValue+0x4a>
 5a0:	4f c0       	rjmp	.+158    	; 0x640 <DIO_u8SetPinValue+0xe8>
 5a2:	2d 85       	ldd	r18, Y+13	; 0x0d
 5a4:	3e 85       	ldd	r19, Y+14	; 0x0e
 5a6:	22 30       	cpi	r18, 0x02	; 2
 5a8:	31 05       	cpc	r19, r1
 5aa:	2c f4       	brge	.+10     	; 0x5b6 <DIO_u8SetPinValue+0x5e>
 5ac:	8d 85       	ldd	r24, Y+13	; 0x0d
 5ae:	9e 85       	ldd	r25, Y+14	; 0x0e
 5b0:	00 97       	sbiw	r24, 0x00	; 0
 5b2:	71 f0       	breq	.+28     	; 0x5d0 <DIO_u8SetPinValue+0x78>
 5b4:	ec c0       	rjmp	.+472    	; 0x78e <DIO_u8SetPinValue+0x236>
 5b6:	2d 85       	ldd	r18, Y+13	; 0x0d
 5b8:	3e 85       	ldd	r19, Y+14	; 0x0e
 5ba:	22 30       	cpi	r18, 0x02	; 2
 5bc:	31 05       	cpc	r19, r1
 5be:	09 f4       	brne	.+2      	; 0x5c2 <DIO_u8SetPinValue+0x6a>
 5c0:	77 c0       	rjmp	.+238    	; 0x6b0 <DIO_u8SetPinValue+0x158>
 5c2:	8d 85       	ldd	r24, Y+13	; 0x0d
 5c4:	9e 85       	ldd	r25, Y+14	; 0x0e
 5c6:	83 30       	cpi	r24, 0x03	; 3
 5c8:	91 05       	cpc	r25, r1
 5ca:	09 f4       	brne	.+2      	; 0x5ce <DIO_u8SetPinValue+0x76>
 5cc:	a9 c0       	rjmp	.+338    	; 0x720 <DIO_u8SetPinValue+0x1c8>
 5ce:	df c0       	rjmp	.+446    	; 0x78e <DIO_u8SetPinValue+0x236>
		case DIO_u8_PORTA:
			switch (Copy_u8PinValue) {
 5d0:	8c 81       	ldd	r24, Y+4	; 0x04
 5d2:	28 2f       	mov	r18, r24
 5d4:	30 e0       	ldi	r19, 0x00	; 0
 5d6:	3c 87       	std	Y+12, r19	; 0x0c
 5d8:	2b 87       	std	Y+11, r18	; 0x0b
 5da:	8b 85       	ldd	r24, Y+11	; 0x0b
 5dc:	9c 85       	ldd	r25, Y+12	; 0x0c
 5de:	00 97       	sbiw	r24, 0x00	; 0
 5e0:	d1 f0       	breq	.+52     	; 0x616 <DIO_u8SetPinValue+0xbe>
 5e2:	2b 85       	ldd	r18, Y+11	; 0x0b
 5e4:	3c 85       	ldd	r19, Y+12	; 0x0c
 5e6:	21 30       	cpi	r18, 0x01	; 1
 5e8:	31 05       	cpc	r19, r1
 5ea:	09 f0       	breq	.+2      	; 0x5ee <DIO_u8SetPinValue+0x96>
 5ec:	d3 c0       	rjmp	.+422    	; 0x794 <DIO_u8SetPinValue+0x23c>
			case DIO_u8_HIGH:
				SET_BIT(DIO_u8_PORTA_REG, Copy_u8PinId);
 5ee:	ab e3       	ldi	r26, 0x3B	; 59
 5f0:	b0 e0       	ldi	r27, 0x00	; 0
 5f2:	eb e3       	ldi	r30, 0x3B	; 59
 5f4:	f0 e0       	ldi	r31, 0x00	; 0
 5f6:	80 81       	ld	r24, Z
 5f8:	48 2f       	mov	r20, r24
 5fa:	8b 81       	ldd	r24, Y+3	; 0x03
 5fc:	28 2f       	mov	r18, r24
 5fe:	30 e0       	ldi	r19, 0x00	; 0
 600:	81 e0       	ldi	r24, 0x01	; 1
 602:	90 e0       	ldi	r25, 0x00	; 0
 604:	02 2e       	mov	r0, r18
 606:	02 c0       	rjmp	.+4      	; 0x60c <DIO_u8SetPinValue+0xb4>
 608:	88 0f       	add	r24, r24
 60a:	99 1f       	adc	r25, r25
 60c:	0a 94       	dec	r0
 60e:	e2 f7       	brpl	.-8      	; 0x608 <DIO_u8SetPinValue+0xb0>
 610:	84 2b       	or	r24, r20
 612:	8c 93       	st	X, r24
 614:	bf c0       	rjmp	.+382    	; 0x794 <DIO_u8SetPinValue+0x23c>
				break;
			case DIO_u8_LOW:
				CLR_BIT(DIO_u8_PORTA_REG, Copy_u8PinId);
 616:	ab e3       	ldi	r26, 0x3B	; 59
 618:	b0 e0       	ldi	r27, 0x00	; 0
 61a:	eb e3       	ldi	r30, 0x3B	; 59
 61c:	f0 e0       	ldi	r31, 0x00	; 0
 61e:	80 81       	ld	r24, Z
 620:	48 2f       	mov	r20, r24
 622:	8b 81       	ldd	r24, Y+3	; 0x03
 624:	28 2f       	mov	r18, r24
 626:	30 e0       	ldi	r19, 0x00	; 0
 628:	81 e0       	ldi	r24, 0x01	; 1
 62a:	90 e0       	ldi	r25, 0x00	; 0
 62c:	02 2e       	mov	r0, r18
 62e:	02 c0       	rjmp	.+4      	; 0x634 <DIO_u8SetPinValue+0xdc>
 630:	88 0f       	add	r24, r24
 632:	99 1f       	adc	r25, r25
 634:	0a 94       	dec	r0
 636:	e2 f7       	brpl	.-8      	; 0x630 <DIO_u8SetPinValue+0xd8>
 638:	80 95       	com	r24
 63a:	84 23       	and	r24, r20
 63c:	8c 93       	st	X, r24
 63e:	aa c0       	rjmp	.+340    	; 0x794 <DIO_u8SetPinValue+0x23c>
				break;
			}
			break;
		case DIO_u8_PORTB:
			switch (Copy_u8PinValue) {
 640:	8c 81       	ldd	r24, Y+4	; 0x04
 642:	28 2f       	mov	r18, r24
 644:	30 e0       	ldi	r19, 0x00	; 0
 646:	3a 87       	std	Y+10, r19	; 0x0a
 648:	29 87       	std	Y+9, r18	; 0x09
 64a:	89 85       	ldd	r24, Y+9	; 0x09
 64c:	9a 85       	ldd	r25, Y+10	; 0x0a
 64e:	00 97       	sbiw	r24, 0x00	; 0
 650:	d1 f0       	breq	.+52     	; 0x686 <DIO_u8SetPinValue+0x12e>
 652:	29 85       	ldd	r18, Y+9	; 0x09
 654:	3a 85       	ldd	r19, Y+10	; 0x0a
 656:	21 30       	cpi	r18, 0x01	; 1
 658:	31 05       	cpc	r19, r1
 65a:	09 f0       	breq	.+2      	; 0x65e <DIO_u8SetPinValue+0x106>
 65c:	9b c0       	rjmp	.+310    	; 0x794 <DIO_u8SetPinValue+0x23c>
			case DIO_u8_HIGH:
				SET_BIT(DIO_u8_PORTB_REG, Copy_u8PinId);
 65e:	a8 e3       	ldi	r26, 0x38	; 56
 660:	b0 e0       	ldi	r27, 0x00	; 0
 662:	e8 e3       	ldi	r30, 0x38	; 56
 664:	f0 e0       	ldi	r31, 0x00	; 0
 666:	80 81       	ld	r24, Z
 668:	48 2f       	mov	r20, r24
 66a:	8b 81       	ldd	r24, Y+3	; 0x03
 66c:	28 2f       	mov	r18, r24
 66e:	30 e0       	ldi	r19, 0x00	; 0
 670:	81 e0       	ldi	r24, 0x01	; 1
 672:	90 e0       	ldi	r25, 0x00	; 0
 674:	02 2e       	mov	r0, r18
 676:	02 c0       	rjmp	.+4      	; 0x67c <DIO_u8SetPinValue+0x124>
 678:	88 0f       	add	r24, r24
 67a:	99 1f       	adc	r25, r25
 67c:	0a 94       	dec	r0
 67e:	e2 f7       	brpl	.-8      	; 0x678 <DIO_u8SetPinValue+0x120>
 680:	84 2b       	or	r24, r20
 682:	8c 93       	st	X, r24
 684:	87 c0       	rjmp	.+270    	; 0x794 <DIO_u8SetPinValue+0x23c>
				break;
			case DIO_u8_LOW:
				CLR_BIT(DIO_u8_PORTB_REG, Copy_u8PinId);
 686:	a8 e3       	ldi	r26, 0x38	; 56
 688:	b0 e0       	ldi	r27, 0x00	; 0
 68a:	e8 e3       	ldi	r30, 0x38	; 56
 68c:	f0 e0       	ldi	r31, 0x00	; 0
 68e:	80 81       	ld	r24, Z
 690:	48 2f       	mov	r20, r24
 692:	8b 81       	ldd	r24, Y+3	; 0x03
 694:	28 2f       	mov	r18, r24
 696:	30 e0       	ldi	r19, 0x00	; 0
 698:	81 e0       	ldi	r24, 0x01	; 1
 69a:	90 e0       	ldi	r25, 0x00	; 0
 69c:	02 2e       	mov	r0, r18
 69e:	02 c0       	rjmp	.+4      	; 0x6a4 <DIO_u8SetPinValue+0x14c>
 6a0:	88 0f       	add	r24, r24
 6a2:	99 1f       	adc	r25, r25
 6a4:	0a 94       	dec	r0
 6a6:	e2 f7       	brpl	.-8      	; 0x6a0 <DIO_u8SetPinValue+0x148>
 6a8:	80 95       	com	r24
 6aa:	84 23       	and	r24, r20
 6ac:	8c 93       	st	X, r24
 6ae:	72 c0       	rjmp	.+228    	; 0x794 <DIO_u8SetPinValue+0x23c>
				break;
			}
			break;
		case DIO_u8_PORTC:
			switch (Copy_u8PinValue) {
 6b0:	8c 81       	ldd	r24, Y+4	; 0x04
 6b2:	28 2f       	mov	r18, r24
 6b4:	30 e0       	ldi	r19, 0x00	; 0
 6b6:	38 87       	std	Y+8, r19	; 0x08
 6b8:	2f 83       	std	Y+7, r18	; 0x07
 6ba:	8f 81       	ldd	r24, Y+7	; 0x07
 6bc:	98 85       	ldd	r25, Y+8	; 0x08
 6be:	00 97       	sbiw	r24, 0x00	; 0
 6c0:	d1 f0       	breq	.+52     	; 0x6f6 <DIO_u8SetPinValue+0x19e>
 6c2:	2f 81       	ldd	r18, Y+7	; 0x07
 6c4:	38 85       	ldd	r19, Y+8	; 0x08
 6c6:	21 30       	cpi	r18, 0x01	; 1
 6c8:	31 05       	cpc	r19, r1
 6ca:	09 f0       	breq	.+2      	; 0x6ce <DIO_u8SetPinValue+0x176>
 6cc:	63 c0       	rjmp	.+198    	; 0x794 <DIO_u8SetPinValue+0x23c>
			case DIO_u8_HIGH:
				SET_BIT(DIO_u8_PORTC_REG, Copy_u8PinId);
 6ce:	a5 e3       	ldi	r26, 0x35	; 53
 6d0:	b0 e0       	ldi	r27, 0x00	; 0
 6d2:	e5 e3       	ldi	r30, 0x35	; 53
 6d4:	f0 e0       	ldi	r31, 0x00	; 0
 6d6:	80 81       	ld	r24, Z
 6d8:	48 2f       	mov	r20, r24
 6da:	8b 81       	ldd	r24, Y+3	; 0x03
 6dc:	28 2f       	mov	r18, r24
 6de:	30 e0       	ldi	r19, 0x00	; 0
 6e0:	81 e0       	ldi	r24, 0x01	; 1
 6e2:	90 e0       	ldi	r25, 0x00	; 0
 6e4:	02 2e       	mov	r0, r18
 6e6:	02 c0       	rjmp	.+4      	; 0x6ec <DIO_u8SetPinValue+0x194>
 6e8:	88 0f       	add	r24, r24
 6ea:	99 1f       	adc	r25, r25
 6ec:	0a 94       	dec	r0
 6ee:	e2 f7       	brpl	.-8      	; 0x6e8 <DIO_u8SetPinValue+0x190>
 6f0:	84 2b       	or	r24, r20
 6f2:	8c 93       	st	X, r24
 6f4:	4f c0       	rjmp	.+158    	; 0x794 <DIO_u8SetPinValue+0x23c>
				break;
			case DIO_u8_LOW:
				CLR_BIT(DIO_u8_PORTC_REG, Copy_u8PinId);
 6f6:	a5 e3       	ldi	r26, 0x35	; 53
 6f8:	b0 e0       	ldi	r27, 0x00	; 0
 6fa:	e5 e3       	ldi	r30, 0x35	; 53
 6fc:	f0 e0       	ldi	r31, 0x00	; 0
 6fe:	80 81       	ld	r24, Z
 700:	48 2f       	mov	r20, r24
 702:	8b 81       	ldd	r24, Y+3	; 0x03
 704:	28 2f       	mov	r18, r24
 706:	30 e0       	ldi	r19, 0x00	; 0
 708:	81 e0       	ldi	r24, 0x01	; 1
 70a:	90 e0       	ldi	r25, 0x00	; 0
 70c:	02 2e       	mov	r0, r18
 70e:	02 c0       	rjmp	.+4      	; 0x714 <DIO_u8SetPinValue+0x1bc>
 710:	88 0f       	add	r24, r24
 712:	99 1f       	adc	r25, r25
 714:	0a 94       	dec	r0
 716:	e2 f7       	brpl	.-8      	; 0x710 <DIO_u8SetPinValue+0x1b8>
 718:	80 95       	com	r24
 71a:	84 23       	and	r24, r20
 71c:	8c 93       	st	X, r24
 71e:	3a c0       	rjmp	.+116    	; 0x794 <DIO_u8SetPinValue+0x23c>
				break;
			}
			break;
		case DIO_u8_PORTD:
			switch (Copy_u8PinValue) {
 720:	8c 81       	ldd	r24, Y+4	; 0x04
 722:	28 2f       	mov	r18, r24
 724:	30 e0       	ldi	r19, 0x00	; 0
 726:	3e 83       	std	Y+6, r19	; 0x06
 728:	2d 83       	std	Y+5, r18	; 0x05
 72a:	8d 81       	ldd	r24, Y+5	; 0x05
 72c:	9e 81       	ldd	r25, Y+6	; 0x06
 72e:	00 97       	sbiw	r24, 0x00	; 0
 730:	c9 f0       	breq	.+50     	; 0x764 <DIO_u8SetPinValue+0x20c>
 732:	2d 81       	ldd	r18, Y+5	; 0x05
 734:	3e 81       	ldd	r19, Y+6	; 0x06
 736:	21 30       	cpi	r18, 0x01	; 1
 738:	31 05       	cpc	r19, r1
 73a:	61 f5       	brne	.+88     	; 0x794 <DIO_u8SetPinValue+0x23c>
			case DIO_u8_HIGH:
				SET_BIT(DIO_u8_PORTD_REG, Copy_u8PinId);
 73c:	a2 e3       	ldi	r26, 0x32	; 50
 73e:	b0 e0       	ldi	r27, 0x00	; 0
 740:	e2 e3       	ldi	r30, 0x32	; 50
 742:	f0 e0       	ldi	r31, 0x00	; 0
 744:	80 81       	ld	r24, Z
 746:	48 2f       	mov	r20, r24
 748:	8b 81       	ldd	r24, Y+3	; 0x03
 74a:	28 2f       	mov	r18, r24
 74c:	30 e0       	ldi	r19, 0x00	; 0
 74e:	81 e0       	ldi	r24, 0x01	; 1
 750:	90 e0       	ldi	r25, 0x00	; 0
 752:	02 2e       	mov	r0, r18
 754:	02 c0       	rjmp	.+4      	; 0x75a <DIO_u8SetPinValue+0x202>
 756:	88 0f       	add	r24, r24
 758:	99 1f       	adc	r25, r25
 75a:	0a 94       	dec	r0
 75c:	e2 f7       	brpl	.-8      	; 0x756 <DIO_u8SetPinValue+0x1fe>
 75e:	84 2b       	or	r24, r20
 760:	8c 93       	st	X, r24
 762:	18 c0       	rjmp	.+48     	; 0x794 <DIO_u8SetPinValue+0x23c>
				break;
			case DIO_u8_LOW:
				CLR_BIT(DIO_u8_PORTD_REG, Copy_u8PinId);
 764:	a2 e3       	ldi	r26, 0x32	; 50
 766:	b0 e0       	ldi	r27, 0x00	; 0
 768:	e2 e3       	ldi	r30, 0x32	; 50
 76a:	f0 e0       	ldi	r31, 0x00	; 0
 76c:	80 81       	ld	r24, Z
 76e:	48 2f       	mov	r20, r24
 770:	8b 81       	ldd	r24, Y+3	; 0x03
 772:	28 2f       	mov	r18, r24
 774:	30 e0       	ldi	r19, 0x00	; 0
 776:	81 e0       	ldi	r24, 0x01	; 1
 778:	90 e0       	ldi	r25, 0x00	; 0
 77a:	02 2e       	mov	r0, r18
 77c:	02 c0       	rjmp	.+4      	; 0x782 <DIO_u8SetPinValue+0x22a>
 77e:	88 0f       	add	r24, r24
 780:	99 1f       	adc	r25, r25
 782:	0a 94       	dec	r0
 784:	e2 f7       	brpl	.-8      	; 0x77e <DIO_u8SetPinValue+0x226>
 786:	80 95       	com	r24
 788:	84 23       	and	r24, r20
 78a:	8c 93       	st	X, r24
 78c:	03 c0       	rjmp	.+6      	; 0x794 <DIO_u8SetPinValue+0x23c>
				break;
			}
			break;
		default:
			Local_u8ErrorState = STD_TYPES_NOK;
 78e:	19 82       	std	Y+1, r1	; 0x01
 790:	01 c0       	rjmp	.+2      	; 0x794 <DIO_u8SetPinValue+0x23c>
		}
	} else
		Local_u8ErrorState = STD_TYPES_NOK;
 792:	19 82       	std	Y+1, r1	; 0x01
	return Local_u8ErrorState;
 794:	89 81       	ldd	r24, Y+1	; 0x01
}
 796:	2e 96       	adiw	r28, 0x0e	; 14
 798:	0f b6       	in	r0, 0x3f	; 63
 79a:	f8 94       	cli
 79c:	de bf       	out	0x3e, r29	; 62
 79e:	0f be       	out	0x3f, r0	; 63
 7a0:	cd bf       	out	0x3d, r28	; 61
 7a2:	cf 91       	pop	r28
 7a4:	df 91       	pop	r29
 7a6:	08 95       	ret

000007a8 <DIO_u8GetPinValue>:
u8 DIO_u8GetPinValue(u8 Copy_u8PortId, u8 Copy_u8PinId, u8 *Copy_Pu8ReturnValue) {
 7a8:	df 93       	push	r29
 7aa:	cf 93       	push	r28
 7ac:	cd b7       	in	r28, 0x3d	; 61
 7ae:	de b7       	in	r29, 0x3e	; 62
 7b0:	27 97       	sbiw	r28, 0x07	; 7
 7b2:	0f b6       	in	r0, 0x3f	; 63
 7b4:	f8 94       	cli
 7b6:	de bf       	out	0x3e, r29	; 62
 7b8:	0f be       	out	0x3f, r0	; 63
 7ba:	cd bf       	out	0x3d, r28	; 61
 7bc:	8a 83       	std	Y+2, r24	; 0x02
 7be:	6b 83       	std	Y+3, r22	; 0x03
 7c0:	5d 83       	std	Y+5, r21	; 0x05
 7c2:	4c 83       	std	Y+4, r20	; 0x04
	u8 Local_u8ErrorState = STD_TYPES_OK;
 7c4:	81 e0       	ldi	r24, 0x01	; 1
 7c6:	89 83       	std	Y+1, r24	; 0x01
	if ((Copy_u8PinId <= DIO_u8_PIN7) && (Copy_Pu8ReturnValue != NULL)) {
 7c8:	8b 81       	ldd	r24, Y+3	; 0x03
 7ca:	88 30       	cpi	r24, 0x08	; 8
 7cc:	08 f0       	brcs	.+2      	; 0x7d0 <DIO_u8GetPinValue+0x28>
 7ce:	7a c0       	rjmp	.+244    	; 0x8c4 <__stack+0x65>
 7d0:	8c 81       	ldd	r24, Y+4	; 0x04
 7d2:	9d 81       	ldd	r25, Y+5	; 0x05
 7d4:	00 97       	sbiw	r24, 0x00	; 0
 7d6:	09 f4       	brne	.+2      	; 0x7da <DIO_u8GetPinValue+0x32>
 7d8:	75 c0       	rjmp	.+234    	; 0x8c4 <__stack+0x65>
		Local_u8ErrorState = STD_TYPES_OK;
 7da:	81 e0       	ldi	r24, 0x01	; 1
 7dc:	89 83       	std	Y+1, r24	; 0x01
		switch (Copy_u8PortId) {
 7de:	8a 81       	ldd	r24, Y+2	; 0x02
 7e0:	28 2f       	mov	r18, r24
 7e2:	30 e0       	ldi	r19, 0x00	; 0
 7e4:	3f 83       	std	Y+7, r19	; 0x07
 7e6:	2e 83       	std	Y+6, r18	; 0x06
 7e8:	4e 81       	ldd	r20, Y+6	; 0x06
 7ea:	5f 81       	ldd	r21, Y+7	; 0x07
 7ec:	41 30       	cpi	r20, 0x01	; 1
 7ee:	51 05       	cpc	r21, r1
 7f0:	59 f1       	breq	.+86     	; 0x848 <DIO_u8GetPinValue+0xa0>
 7f2:	8e 81       	ldd	r24, Y+6	; 0x06
 7f4:	9f 81       	ldd	r25, Y+7	; 0x07
 7f6:	82 30       	cpi	r24, 0x02	; 2
 7f8:	91 05       	cpc	r25, r1
 7fa:	34 f4       	brge	.+12     	; 0x808 <DIO_u8GetPinValue+0x60>
 7fc:	2e 81       	ldd	r18, Y+6	; 0x06
 7fe:	3f 81       	ldd	r19, Y+7	; 0x07
 800:	21 15       	cp	r18, r1
 802:	31 05       	cpc	r19, r1
 804:	69 f0       	breq	.+26     	; 0x820 <DIO_u8GetPinValue+0x78>
 806:	5c c0       	rjmp	.+184    	; 0x8c0 <__stack+0x61>
 808:	4e 81       	ldd	r20, Y+6	; 0x06
 80a:	5f 81       	ldd	r21, Y+7	; 0x07
 80c:	42 30       	cpi	r20, 0x02	; 2
 80e:	51 05       	cpc	r21, r1
 810:	79 f1       	breq	.+94     	; 0x870 <__stack+0x11>
 812:	8e 81       	ldd	r24, Y+6	; 0x06
 814:	9f 81       	ldd	r25, Y+7	; 0x07
 816:	83 30       	cpi	r24, 0x03	; 3
 818:	91 05       	cpc	r25, r1
 81a:	09 f4       	brne	.+2      	; 0x81e <DIO_u8GetPinValue+0x76>
 81c:	3d c0       	rjmp	.+122    	; 0x898 <__stack+0x39>
 81e:	50 c0       	rjmp	.+160    	; 0x8c0 <__stack+0x61>
		case DIO_u8_PORTA:
			*Copy_Pu8ReturnValue = GET_BIT(DIO_u8_PINA_REG, Copy_u8PinId);
 820:	e9 e3       	ldi	r30, 0x39	; 57
 822:	f0 e0       	ldi	r31, 0x00	; 0
 824:	80 81       	ld	r24, Z
 826:	28 2f       	mov	r18, r24
 828:	30 e0       	ldi	r19, 0x00	; 0
 82a:	8b 81       	ldd	r24, Y+3	; 0x03
 82c:	88 2f       	mov	r24, r24
 82e:	90 e0       	ldi	r25, 0x00	; 0
 830:	a9 01       	movw	r20, r18
 832:	02 c0       	rjmp	.+4      	; 0x838 <DIO_u8GetPinValue+0x90>
 834:	55 95       	asr	r21
 836:	47 95       	ror	r20
 838:	8a 95       	dec	r24
 83a:	e2 f7       	brpl	.-8      	; 0x834 <DIO_u8GetPinValue+0x8c>
 83c:	ca 01       	movw	r24, r20
 83e:	81 70       	andi	r24, 0x01	; 1
 840:	ec 81       	ldd	r30, Y+4	; 0x04
 842:	fd 81       	ldd	r31, Y+5	; 0x05
 844:	80 83       	st	Z, r24
 846:	40 c0       	rjmp	.+128    	; 0x8c8 <__stack+0x69>
			break;
		case DIO_u8_PORTB:
			*Copy_Pu8ReturnValue = GET_BIT(DIO_u8_PINB_REG, Copy_u8PinId);
 848:	e6 e3       	ldi	r30, 0x36	; 54
 84a:	f0 e0       	ldi	r31, 0x00	; 0
 84c:	80 81       	ld	r24, Z
 84e:	28 2f       	mov	r18, r24
 850:	30 e0       	ldi	r19, 0x00	; 0
 852:	8b 81       	ldd	r24, Y+3	; 0x03
 854:	88 2f       	mov	r24, r24
 856:	90 e0       	ldi	r25, 0x00	; 0
 858:	a9 01       	movw	r20, r18
 85a:	02 c0       	rjmp	.+4      	; 0x860 <__stack+0x1>
 85c:	55 95       	asr	r21
 85e:	47 95       	ror	r20
 860:	8a 95       	dec	r24
 862:	e2 f7       	brpl	.-8      	; 0x85c <DIO_u8GetPinValue+0xb4>
 864:	ca 01       	movw	r24, r20
 866:	81 70       	andi	r24, 0x01	; 1
 868:	ec 81       	ldd	r30, Y+4	; 0x04
 86a:	fd 81       	ldd	r31, Y+5	; 0x05
 86c:	80 83       	st	Z, r24
 86e:	2c c0       	rjmp	.+88     	; 0x8c8 <__stack+0x69>
			break;
		case DIO_u8_PORTC:
			*Copy_Pu8ReturnValue = GET_BIT(DIO_u8_PINC_REG, Copy_u8PinId);
 870:	e3 e3       	ldi	r30, 0x33	; 51
 872:	f0 e0       	ldi	r31, 0x00	; 0
 874:	80 81       	ld	r24, Z
 876:	28 2f       	mov	r18, r24
 878:	30 e0       	ldi	r19, 0x00	; 0
 87a:	8b 81       	ldd	r24, Y+3	; 0x03
 87c:	88 2f       	mov	r24, r24
 87e:	90 e0       	ldi	r25, 0x00	; 0
 880:	a9 01       	movw	r20, r18
 882:	02 c0       	rjmp	.+4      	; 0x888 <__stack+0x29>
 884:	55 95       	asr	r21
 886:	47 95       	ror	r20
 888:	8a 95       	dec	r24
 88a:	e2 f7       	brpl	.-8      	; 0x884 <__stack+0x25>
 88c:	ca 01       	movw	r24, r20
 88e:	81 70       	andi	r24, 0x01	; 1
 890:	ec 81       	ldd	r30, Y+4	; 0x04
 892:	fd 81       	ldd	r31, Y+5	; 0x05
 894:	80 83       	st	Z, r24
 896:	18 c0       	rjmp	.+48     	; 0x8c8 <__stack+0x69>
			break;
		case DIO_u8_PORTD:
			*Copy_Pu8ReturnValue = GET_BIT(DIO_u8_PIND_REG, Copy_u8PinId);
 898:	e0 e3       	ldi	r30, 0x30	; 48
 89a:	f0 e0       	ldi	r31, 0x00	; 0
 89c:	80 81       	ld	r24, Z
 89e:	28 2f       	mov	r18, r24
 8a0:	30 e0       	ldi	r19, 0x00	; 0
 8a2:	8b 81       	ldd	r24, Y+3	; 0x03
 8a4:	88 2f       	mov	r24, r24
 8a6:	90 e0       	ldi	r25, 0x00	; 0
 8a8:	a9 01       	movw	r20, r18
 8aa:	02 c0       	rjmp	.+4      	; 0x8b0 <__stack+0x51>
 8ac:	55 95       	asr	r21
 8ae:	47 95       	ror	r20
 8b0:	8a 95       	dec	r24
 8b2:	e2 f7       	brpl	.-8      	; 0x8ac <__stack+0x4d>
 8b4:	ca 01       	movw	r24, r20
 8b6:	81 70       	andi	r24, 0x01	; 1
 8b8:	ec 81       	ldd	r30, Y+4	; 0x04
 8ba:	fd 81       	ldd	r31, Y+5	; 0x05
 8bc:	80 83       	st	Z, r24
 8be:	04 c0       	rjmp	.+8      	; 0x8c8 <__stack+0x69>
			break;
		default:
			Local_u8ErrorState = STD_TYPES_NOK;
 8c0:	19 82       	std	Y+1, r1	; 0x01
 8c2:	02 c0       	rjmp	.+4      	; 0x8c8 <__stack+0x69>
		}
	} else
		Local_u8ErrorState = STD_TYPES_OK;
 8c4:	81 e0       	ldi	r24, 0x01	; 1
 8c6:	89 83       	std	Y+1, r24	; 0x01
	return Local_u8ErrorState;
 8c8:	89 81       	ldd	r24, Y+1	; 0x01
}
 8ca:	27 96       	adiw	r28, 0x07	; 7
 8cc:	0f b6       	in	r0, 0x3f	; 63
 8ce:	f8 94       	cli
 8d0:	de bf       	out	0x3e, r29	; 62
 8d2:	0f be       	out	0x3f, r0	; 63
 8d4:	cd bf       	out	0x3d, r28	; 61
 8d6:	cf 91       	pop	r28
 8d8:	df 91       	pop	r29
 8da:	08 95       	ret

000008dc <DIO_u8TogglePinValue>:
u8 DIO_u8TogglePinValue(u8 Copy_u8PortId, u8 Copy_u8PinId) {
 8dc:	df 93       	push	r29
 8de:	cf 93       	push	r28
 8e0:	00 d0       	rcall	.+0      	; 0x8e2 <DIO_u8TogglePinValue+0x6>
 8e2:	00 d0       	rcall	.+0      	; 0x8e4 <DIO_u8TogglePinValue+0x8>
 8e4:	00 d0       	rcall	.+0      	; 0x8e6 <DIO_u8TogglePinValue+0xa>
 8e6:	cd b7       	in	r28, 0x3d	; 61
 8e8:	de b7       	in	r29, 0x3e	; 62
 8ea:	8a 83       	std	Y+2, r24	; 0x02
 8ec:	6b 83       	std	Y+3, r22	; 0x03
	u8 Local_u8ErrorState = STD_TYPES_OK;
 8ee:	81 e0       	ldi	r24, 0x01	; 1
 8f0:	89 83       	std	Y+1, r24	; 0x01
	if (Copy_u8PinId <= DIO_u8_PIN7) {
 8f2:	8b 81       	ldd	r24, Y+3	; 0x03
 8f4:	88 30       	cpi	r24, 0x08	; 8
 8f6:	08 f0       	brcs	.+2      	; 0x8fa <DIO_u8TogglePinValue+0x1e>
 8f8:	70 c0       	rjmp	.+224    	; 0x9da <DIO_u8TogglePinValue+0xfe>
		switch (Copy_u8PortId) {
 8fa:	8a 81       	ldd	r24, Y+2	; 0x02
 8fc:	28 2f       	mov	r18, r24
 8fe:	30 e0       	ldi	r19, 0x00	; 0
 900:	3d 83       	std	Y+5, r19	; 0x05
 902:	2c 83       	std	Y+4, r18	; 0x04
 904:	8c 81       	ldd	r24, Y+4	; 0x04
 906:	9d 81       	ldd	r25, Y+5	; 0x05
 908:	81 30       	cpi	r24, 0x01	; 1
 90a:	91 05       	cpc	r25, r1
 90c:	49 f1       	breq	.+82     	; 0x960 <DIO_u8TogglePinValue+0x84>
 90e:	2c 81       	ldd	r18, Y+4	; 0x04
 910:	3d 81       	ldd	r19, Y+5	; 0x05
 912:	22 30       	cpi	r18, 0x02	; 2
 914:	31 05       	cpc	r19, r1
 916:	2c f4       	brge	.+10     	; 0x922 <DIO_u8TogglePinValue+0x46>
 918:	8c 81       	ldd	r24, Y+4	; 0x04
 91a:	9d 81       	ldd	r25, Y+5	; 0x05
 91c:	00 97       	sbiw	r24, 0x00	; 0
 91e:	61 f0       	breq	.+24     	; 0x938 <DIO_u8TogglePinValue+0x5c>
 920:	5b c0       	rjmp	.+182    	; 0x9d8 <DIO_u8TogglePinValue+0xfc>
 922:	2c 81       	ldd	r18, Y+4	; 0x04
 924:	3d 81       	ldd	r19, Y+5	; 0x05
 926:	22 30       	cpi	r18, 0x02	; 2
 928:	31 05       	cpc	r19, r1
 92a:	71 f1       	breq	.+92     	; 0x988 <DIO_u8TogglePinValue+0xac>
 92c:	8c 81       	ldd	r24, Y+4	; 0x04
 92e:	9d 81       	ldd	r25, Y+5	; 0x05
 930:	83 30       	cpi	r24, 0x03	; 3
 932:	91 05       	cpc	r25, r1
 934:	e9 f1       	breq	.+122    	; 0x9b0 <DIO_u8TogglePinValue+0xd4>
 936:	50 c0       	rjmp	.+160    	; 0x9d8 <DIO_u8TogglePinValue+0xfc>
		case DIO_u8_PORTA:
			TOG_BIT(DIO_u8_PORTA_REG, Copy_u8PinId);
 938:	ab e3       	ldi	r26, 0x3B	; 59
 93a:	b0 e0       	ldi	r27, 0x00	; 0
 93c:	eb e3       	ldi	r30, 0x3B	; 59
 93e:	f0 e0       	ldi	r31, 0x00	; 0
 940:	80 81       	ld	r24, Z
 942:	48 2f       	mov	r20, r24
 944:	8b 81       	ldd	r24, Y+3	; 0x03
 946:	28 2f       	mov	r18, r24
 948:	30 e0       	ldi	r19, 0x00	; 0
 94a:	81 e0       	ldi	r24, 0x01	; 1
 94c:	90 e0       	ldi	r25, 0x00	; 0
 94e:	02 2e       	mov	r0, r18
 950:	02 c0       	rjmp	.+4      	; 0x956 <DIO_u8TogglePinValue+0x7a>
 952:	88 0f       	add	r24, r24
 954:	99 1f       	adc	r25, r25
 956:	0a 94       	dec	r0
 958:	e2 f7       	brpl	.-8      	; 0x952 <DIO_u8TogglePinValue+0x76>
 95a:	84 27       	eor	r24, r20
 95c:	8c 93       	st	X, r24
 95e:	3d c0       	rjmp	.+122    	; 0x9da <DIO_u8TogglePinValue+0xfe>
			break;
		case DIO_u8_PORTB:
			TOG_BIT(DIO_u8_PORTB_REG, Copy_u8PinId);
 960:	a8 e3       	ldi	r26, 0x38	; 56
 962:	b0 e0       	ldi	r27, 0x00	; 0
 964:	e8 e3       	ldi	r30, 0x38	; 56
 966:	f0 e0       	ldi	r31, 0x00	; 0
 968:	80 81       	ld	r24, Z
 96a:	48 2f       	mov	r20, r24
 96c:	8b 81       	ldd	r24, Y+3	; 0x03
 96e:	28 2f       	mov	r18, r24
 970:	30 e0       	ldi	r19, 0x00	; 0
 972:	81 e0       	ldi	r24, 0x01	; 1
 974:	90 e0       	ldi	r25, 0x00	; 0
 976:	02 2e       	mov	r0, r18
 978:	02 c0       	rjmp	.+4      	; 0x97e <DIO_u8TogglePinValue+0xa2>
 97a:	88 0f       	add	r24, r24
 97c:	99 1f       	adc	r25, r25
 97e:	0a 94       	dec	r0
 980:	e2 f7       	brpl	.-8      	; 0x97a <DIO_u8TogglePinValue+0x9e>
 982:	84 27       	eor	r24, r20
 984:	8c 93       	st	X, r24
 986:	29 c0       	rjmp	.+82     	; 0x9da <DIO_u8TogglePinValue+0xfe>
			break;
		case DIO_u8_PORTC:
			TOG_BIT(DIO_u8_PORTC_REG, Copy_u8PinId);
 988:	a5 e3       	ldi	r26, 0x35	; 53
 98a:	b0 e0       	ldi	r27, 0x00	; 0
 98c:	e5 e3       	ldi	r30, 0x35	; 53
 98e:	f0 e0       	ldi	r31, 0x00	; 0
 990:	80 81       	ld	r24, Z
 992:	48 2f       	mov	r20, r24
 994:	8b 81       	ldd	r24, Y+3	; 0x03
 996:	28 2f       	mov	r18, r24
 998:	30 e0       	ldi	r19, 0x00	; 0
 99a:	81 e0       	ldi	r24, 0x01	; 1
 99c:	90 e0       	ldi	r25, 0x00	; 0
 99e:	02 2e       	mov	r0, r18
 9a0:	02 c0       	rjmp	.+4      	; 0x9a6 <DIO_u8TogglePinValue+0xca>
 9a2:	88 0f       	add	r24, r24
 9a4:	99 1f       	adc	r25, r25
 9a6:	0a 94       	dec	r0
 9a8:	e2 f7       	brpl	.-8      	; 0x9a2 <DIO_u8TogglePinValue+0xc6>
 9aa:	84 27       	eor	r24, r20
 9ac:	8c 93       	st	X, r24
 9ae:	15 c0       	rjmp	.+42     	; 0x9da <DIO_u8TogglePinValue+0xfe>
			break;
		case DIO_u8_PORTD:
			TOG_BIT(DIO_u8_PORTD_REG, Copy_u8PinId);
 9b0:	a2 e3       	ldi	r26, 0x32	; 50
 9b2:	b0 e0       	ldi	r27, 0x00	; 0
 9b4:	e2 e3       	ldi	r30, 0x32	; 50
 9b6:	f0 e0       	ldi	r31, 0x00	; 0
 9b8:	80 81       	ld	r24, Z
 9ba:	48 2f       	mov	r20, r24
 9bc:	8b 81       	ldd	r24, Y+3	; 0x03
 9be:	28 2f       	mov	r18, r24
 9c0:	30 e0       	ldi	r19, 0x00	; 0
 9c2:	81 e0       	ldi	r24, 0x01	; 1
 9c4:	90 e0       	ldi	r25, 0x00	; 0
 9c6:	02 2e       	mov	r0, r18
 9c8:	02 c0       	rjmp	.+4      	; 0x9ce <DIO_u8TogglePinValue+0xf2>
 9ca:	88 0f       	add	r24, r24
 9cc:	99 1f       	adc	r25, r25
 9ce:	0a 94       	dec	r0
 9d0:	e2 f7       	brpl	.-8      	; 0x9ca <DIO_u8TogglePinValue+0xee>
 9d2:	84 27       	eor	r24, r20
 9d4:	8c 93       	st	X, r24
 9d6:	01 c0       	rjmp	.+2      	; 0x9da <DIO_u8TogglePinValue+0xfe>
			break;
		default:
			Local_u8ErrorState = STD_TYPES_NOK;
 9d8:	19 82       	std	Y+1, r1	; 0x01
		}
	}
}
 9da:	26 96       	adiw	r28, 0x06	; 6
 9dc:	0f b6       	in	r0, 0x3f	; 63
 9de:	f8 94       	cli
 9e0:	de bf       	out	0x3e, r29	; 62
 9e2:	0f be       	out	0x3f, r0	; 63
 9e4:	cd bf       	out	0x3d, r28	; 61
 9e6:	cf 91       	pop	r28
 9e8:	df 91       	pop	r29
 9ea:	08 95       	ret

000009ec <DIO_u8SetPortValue>:
u8 DIO_u8SetPortValue(u8 Copy_u8PortId, u8 Copy_u8PortValue) {
 9ec:	df 93       	push	r29
 9ee:	cf 93       	push	r28
 9f0:	00 d0       	rcall	.+0      	; 0x9f2 <DIO_u8SetPortValue+0x6>
 9f2:	00 d0       	rcall	.+0      	; 0x9f4 <DIO_u8SetPortValue+0x8>
 9f4:	0f 92       	push	r0
 9f6:	cd b7       	in	r28, 0x3d	; 61
 9f8:	de b7       	in	r29, 0x3e	; 62
 9fa:	8a 83       	std	Y+2, r24	; 0x02
 9fc:	6b 83       	std	Y+3, r22	; 0x03
	u8 Local_u8ErrorState = STD_TYPES_OK;
 9fe:	81 e0       	ldi	r24, 0x01	; 1
 a00:	89 83       	std	Y+1, r24	; 0x01
	switch (Copy_u8PortId) {
 a02:	8a 81       	ldd	r24, Y+2	; 0x02
 a04:	28 2f       	mov	r18, r24
 a06:	30 e0       	ldi	r19, 0x00	; 0
 a08:	3d 83       	std	Y+5, r19	; 0x05
 a0a:	2c 83       	std	Y+4, r18	; 0x04
 a0c:	8c 81       	ldd	r24, Y+4	; 0x04
 a0e:	9d 81       	ldd	r25, Y+5	; 0x05
 a10:	81 30       	cpi	r24, 0x01	; 1
 a12:	91 05       	cpc	r25, r1
 a14:	d1 f0       	breq	.+52     	; 0xa4a <DIO_u8SetPortValue+0x5e>
 a16:	2c 81       	ldd	r18, Y+4	; 0x04
 a18:	3d 81       	ldd	r19, Y+5	; 0x05
 a1a:	22 30       	cpi	r18, 0x02	; 2
 a1c:	31 05       	cpc	r19, r1
 a1e:	2c f4       	brge	.+10     	; 0xa2a <DIO_u8SetPortValue+0x3e>
 a20:	8c 81       	ldd	r24, Y+4	; 0x04
 a22:	9d 81       	ldd	r25, Y+5	; 0x05
 a24:	00 97       	sbiw	r24, 0x00	; 0
 a26:	61 f0       	breq	.+24     	; 0xa40 <DIO_u8SetPortValue+0x54>
 a28:	1f c0       	rjmp	.+62     	; 0xa68 <DIO_u8SetPortValue+0x7c>
 a2a:	2c 81       	ldd	r18, Y+4	; 0x04
 a2c:	3d 81       	ldd	r19, Y+5	; 0x05
 a2e:	22 30       	cpi	r18, 0x02	; 2
 a30:	31 05       	cpc	r19, r1
 a32:	81 f0       	breq	.+32     	; 0xa54 <DIO_u8SetPortValue+0x68>
 a34:	8c 81       	ldd	r24, Y+4	; 0x04
 a36:	9d 81       	ldd	r25, Y+5	; 0x05
 a38:	83 30       	cpi	r24, 0x03	; 3
 a3a:	91 05       	cpc	r25, r1
 a3c:	81 f0       	breq	.+32     	; 0xa5e <DIO_u8SetPortValue+0x72>
 a3e:	14 c0       	rjmp	.+40     	; 0xa68 <DIO_u8SetPortValue+0x7c>
	case DIO_u8_PORTA:
		DIO_u8_PORTA_REG = Copy_u8PortValue;
 a40:	eb e3       	ldi	r30, 0x3B	; 59
 a42:	f0 e0       	ldi	r31, 0x00	; 0
 a44:	8b 81       	ldd	r24, Y+3	; 0x03
 a46:	80 83       	st	Z, r24
 a48:	10 c0       	rjmp	.+32     	; 0xa6a <DIO_u8SetPortValue+0x7e>
		break;
	case DIO_u8_PORTB:
		DIO_u8_PORTB_REG = Copy_u8PortValue;
 a4a:	e8 e3       	ldi	r30, 0x38	; 56
 a4c:	f0 e0       	ldi	r31, 0x00	; 0
 a4e:	8b 81       	ldd	r24, Y+3	; 0x03
 a50:	80 83       	st	Z, r24
 a52:	0b c0       	rjmp	.+22     	; 0xa6a <DIO_u8SetPortValue+0x7e>
		break;
	case DIO_u8_PORTC:
		DIO_u8_PORTC_REG = Copy_u8PortValue;
 a54:	e5 e3       	ldi	r30, 0x35	; 53
 a56:	f0 e0       	ldi	r31, 0x00	; 0
 a58:	8b 81       	ldd	r24, Y+3	; 0x03
 a5a:	80 83       	st	Z, r24
 a5c:	06 c0       	rjmp	.+12     	; 0xa6a <DIO_u8SetPortValue+0x7e>
		break;
	case DIO_u8_PORTD:
		DIO_u8_PORTD_REG = Copy_u8PortValue;
 a5e:	e2 e3       	ldi	r30, 0x32	; 50
 a60:	f0 e0       	ldi	r31, 0x00	; 0
 a62:	8b 81       	ldd	r24, Y+3	; 0x03
 a64:	80 83       	st	Z, r24
 a66:	01 c0       	rjmp	.+2      	; 0xa6a <DIO_u8SetPortValue+0x7e>
		break;
	default:
		Local_u8ErrorState = STD_TYPES_NOK;
 a68:	19 82       	std	Y+1, r1	; 0x01
	}
	return Local_u8ErrorState;
 a6a:	89 81       	ldd	r24, Y+1	; 0x01
}
 a6c:	0f 90       	pop	r0
 a6e:	0f 90       	pop	r0
 a70:	0f 90       	pop	r0
 a72:	0f 90       	pop	r0
 a74:	0f 90       	pop	r0
 a76:	cf 91       	pop	r28
 a78:	df 91       	pop	r29
 a7a:	08 95       	ret

00000a7c <DIO_u8GetPortValue>:

u8 DIO_u8GetPortValue(u8 Copy_u8PortId, u8 *Copy_Pu8ReturnValue) {
 a7c:	df 93       	push	r29
 a7e:	cf 93       	push	r28
 a80:	00 d0       	rcall	.+0      	; 0xa82 <DIO_u8GetPortValue+0x6>
 a82:	00 d0       	rcall	.+0      	; 0xa84 <DIO_u8GetPortValue+0x8>
 a84:	00 d0       	rcall	.+0      	; 0xa86 <DIO_u8GetPortValue+0xa>
 a86:	cd b7       	in	r28, 0x3d	; 61
 a88:	de b7       	in	r29, 0x3e	; 62
 a8a:	8a 83       	std	Y+2, r24	; 0x02
 a8c:	7c 83       	std	Y+4, r23	; 0x04
 a8e:	6b 83       	std	Y+3, r22	; 0x03
	u8 Local_u8ErrorState = STD_TYPES_OK;
 a90:	81 e0       	ldi	r24, 0x01	; 1
 a92:	89 83       	std	Y+1, r24	; 0x01
	if (Copy_Pu8ReturnValue != NULL) {
 a94:	8b 81       	ldd	r24, Y+3	; 0x03
 a96:	9c 81       	ldd	r25, Y+4	; 0x04
 a98:	00 97       	sbiw	r24, 0x00	; 0
 a9a:	09 f4       	brne	.+2      	; 0xa9e <DIO_u8GetPortValue+0x22>
 a9c:	3f c0       	rjmp	.+126    	; 0xb1c <DIO_u8GetPortValue+0xa0>
		Local_u8ErrorState = STD_TYPES_OK;
 a9e:	81 e0       	ldi	r24, 0x01	; 1
 aa0:	89 83       	std	Y+1, r24	; 0x01
		switch (Copy_u8PortId) {
 aa2:	8a 81       	ldd	r24, Y+2	; 0x02
 aa4:	28 2f       	mov	r18, r24
 aa6:	30 e0       	ldi	r19, 0x00	; 0
 aa8:	3e 83       	std	Y+6, r19	; 0x06
 aaa:	2d 83       	std	Y+5, r18	; 0x05
 aac:	8d 81       	ldd	r24, Y+5	; 0x05
 aae:	9e 81       	ldd	r25, Y+6	; 0x06
 ab0:	81 30       	cpi	r24, 0x01	; 1
 ab2:	91 05       	cpc	r25, r1
 ab4:	e1 f0       	breq	.+56     	; 0xaee <DIO_u8GetPortValue+0x72>
 ab6:	2d 81       	ldd	r18, Y+5	; 0x05
 ab8:	3e 81       	ldd	r19, Y+6	; 0x06
 aba:	22 30       	cpi	r18, 0x02	; 2
 abc:	31 05       	cpc	r19, r1
 abe:	2c f4       	brge	.+10     	; 0xaca <DIO_u8GetPortValue+0x4e>
 ac0:	8d 81       	ldd	r24, Y+5	; 0x05
 ac2:	9e 81       	ldd	r25, Y+6	; 0x06
 ac4:	00 97       	sbiw	r24, 0x00	; 0
 ac6:	61 f0       	breq	.+24     	; 0xae0 <DIO_u8GetPortValue+0x64>
 ac8:	27 c0       	rjmp	.+78     	; 0xb18 <DIO_u8GetPortValue+0x9c>
 aca:	2d 81       	ldd	r18, Y+5	; 0x05
 acc:	3e 81       	ldd	r19, Y+6	; 0x06
 ace:	22 30       	cpi	r18, 0x02	; 2
 ad0:	31 05       	cpc	r19, r1
 ad2:	a1 f0       	breq	.+40     	; 0xafc <DIO_u8GetPortValue+0x80>
 ad4:	8d 81       	ldd	r24, Y+5	; 0x05
 ad6:	9e 81       	ldd	r25, Y+6	; 0x06
 ad8:	83 30       	cpi	r24, 0x03	; 3
 ada:	91 05       	cpc	r25, r1
 adc:	b1 f0       	breq	.+44     	; 0xb0a <DIO_u8GetPortValue+0x8e>
 ade:	1c c0       	rjmp	.+56     	; 0xb18 <DIO_u8GetPortValue+0x9c>
		case DIO_u8_PORTA:
			*Copy_Pu8ReturnValue = DIO_u8_PINA_REG;
 ae0:	e9 e3       	ldi	r30, 0x39	; 57
 ae2:	f0 e0       	ldi	r31, 0x00	; 0
 ae4:	80 81       	ld	r24, Z
 ae6:	eb 81       	ldd	r30, Y+3	; 0x03
 ae8:	fc 81       	ldd	r31, Y+4	; 0x04
 aea:	80 83       	st	Z, r24
 aec:	19 c0       	rjmp	.+50     	; 0xb20 <DIO_u8GetPortValue+0xa4>
			break;
		case DIO_u8_PORTB:
			*Copy_Pu8ReturnValue = DIO_u8_PINB_REG;
 aee:	e6 e3       	ldi	r30, 0x36	; 54
 af0:	f0 e0       	ldi	r31, 0x00	; 0
 af2:	80 81       	ld	r24, Z
 af4:	eb 81       	ldd	r30, Y+3	; 0x03
 af6:	fc 81       	ldd	r31, Y+4	; 0x04
 af8:	80 83       	st	Z, r24
 afa:	12 c0       	rjmp	.+36     	; 0xb20 <DIO_u8GetPortValue+0xa4>
			break;
		case DIO_u8_PORTC:
			*Copy_Pu8ReturnValue = DIO_u8_PINC_REG;
 afc:	e3 e3       	ldi	r30, 0x33	; 51
 afe:	f0 e0       	ldi	r31, 0x00	; 0
 b00:	80 81       	ld	r24, Z
 b02:	eb 81       	ldd	r30, Y+3	; 0x03
 b04:	fc 81       	ldd	r31, Y+4	; 0x04
 b06:	80 83       	st	Z, r24
 b08:	0b c0       	rjmp	.+22     	; 0xb20 <DIO_u8GetPortValue+0xa4>
			break;
		case DIO_u8_PORTD:
			*Copy_Pu8ReturnValue = DIO_u8_PIND_REG;
 b0a:	e0 e3       	ldi	r30, 0x30	; 48
 b0c:	f0 e0       	ldi	r31, 0x00	; 0
 b0e:	80 81       	ld	r24, Z
 b10:	eb 81       	ldd	r30, Y+3	; 0x03
 b12:	fc 81       	ldd	r31, Y+4	; 0x04
 b14:	80 83       	st	Z, r24
 b16:	04 c0       	rjmp	.+8      	; 0xb20 <DIO_u8GetPortValue+0xa4>
			break;
		default:
			Local_u8ErrorState = STD_TYPES_NOK;
 b18:	19 82       	std	Y+1, r1	; 0x01
 b1a:	02 c0       	rjmp	.+4      	; 0xb20 <DIO_u8GetPortValue+0xa4>
		}
	} else
		Local_u8ErrorState = STD_TYPES_OK;
 b1c:	81 e0       	ldi	r24, 0x01	; 1
 b1e:	89 83       	std	Y+1, r24	; 0x01
	return Local_u8ErrorState;
 b20:	89 81       	ldd	r24, Y+1	; 0x01
}
 b22:	26 96       	adiw	r28, 0x06	; 6
 b24:	0f b6       	in	r0, 0x3f	; 63
 b26:	f8 94       	cli
 b28:	de bf       	out	0x3e, r29	; 62
 b2a:	0f be       	out	0x3f, r0	; 63
 b2c:	cd bf       	out	0x3d, r28	; 61
 b2e:	cf 91       	pop	r28
 b30:	df 91       	pop	r29
 b32:	08 95       	ret

00000b34 <EXTI_voidINT0Init>:
/*Global pointer to function to hold ISR addresses*/
static void (*EXTI_pvINT0Func)(void)=NULL;
static void (*EXTI_pvINT1Func)(void)=NULL;
static void (*EXTI_pvINT2Func)(void)=NULL;

void EXTI_voidINT0Init(void){
 b34:	df 93       	push	r29
 b36:	cf 93       	push	r28
 b38:	cd b7       	in	r28, 0x3d	; 61
 b3a:	de b7       	in	r29, 0x3e	; 62
#elif 	INT0_SENSE == ON_CHANGE
CLR_BIT(EXTI_u8_MCUCR_REG,MCUCR_ISC01);
SET_BIT(EXTI_u8_MCUCR_REG,MCUCR_ISC00);

#elif 	INT0_SENSE == FALLING_EDGE
SET_BIT(EXTI_u8_MCUCR_REG,MCUCR_ISC01);
 b3c:	a5 e5       	ldi	r26, 0x55	; 85
 b3e:	b0 e0       	ldi	r27, 0x00	; 0
 b40:	e5 e5       	ldi	r30, 0x55	; 85
 b42:	f0 e0       	ldi	r31, 0x00	; 0
 b44:	80 81       	ld	r24, Z
 b46:	82 60       	ori	r24, 0x02	; 2
 b48:	8c 93       	st	X, r24
CLR_BIT(EXTI_u8_MCUCR_REG,MCUCR_ISC00);
 b4a:	a5 e5       	ldi	r26, 0x55	; 85
 b4c:	b0 e0       	ldi	r27, 0x00	; 0
 b4e:	e5 e5       	ldi	r30, 0x55	; 85
 b50:	f0 e0       	ldi	r31, 0x00	; 0
 b52:	80 81       	ld	r24, Z
 b54:	8e 7f       	andi	r24, 0xFE	; 254
 b56:	8c 93       	st	X, r24
#error "Wrong INT0_SENSE Configuration option"
#endif
/*Check peripheral interrupt enable initial state*/
#if INT0_INITIAL_STATE == ENABLED
/*Enable EXTI0 Peripheral interrupt enable*/
SET_BIT(EXTI_u8_GICR_REG, GICR_INT0);
 b58:	ab e5       	ldi	r26, 0x5B	; 91
 b5a:	b0 e0       	ldi	r27, 0x00	; 0
 b5c:	eb e5       	ldi	r30, 0x5B	; 91
 b5e:	f0 e0       	ldi	r31, 0x00	; 0
 b60:	80 81       	ld	r24, Z
 b62:	80 64       	ori	r24, 0x40	; 64
 b64:	8c 93       	st	X, r24
/*Enable EXTI0 Peripheral interrupt enable*/
CLR_BIT(EXTI_u8_GICR_REG,GICR_INT0);
#else
#error "Wrong INT0_INITIAL_STATE Configuration option"
#endif
}
 b66:	cf 91       	pop	r28
 b68:	df 91       	pop	r29
 b6a:	08 95       	ret

00000b6c <EXTI_voidINT1Init>:

void EXTI_voidINT1Init(void){
 b6c:	df 93       	push	r29
 b6e:	cf 93       	push	r28
 b70:	cd b7       	in	r28, 0x3d	; 61
 b72:	de b7       	in	r29, 0x3e	; 62
#elif 	INT1_SENSE == ON_CHANGE
CLR_BIT(EXTI_u8_MCUCR_REG,MCUCR_ISC11);
SET_BIT(EXTI_u8_MCUCR_REG,MCUCR_ISC10);

#elif 	INT1_SENSE == FALLING_EDGE
SET_BIT(EXTI_u8_MCUCR_REG,MCUCR_ISC11);
 b74:	a5 e5       	ldi	r26, 0x55	; 85
 b76:	b0 e0       	ldi	r27, 0x00	; 0
 b78:	e5 e5       	ldi	r30, 0x55	; 85
 b7a:	f0 e0       	ldi	r31, 0x00	; 0
 b7c:	80 81       	ld	r24, Z
 b7e:	88 60       	ori	r24, 0x08	; 8
 b80:	8c 93       	st	X, r24
CLR_BIT(EXTI_u8_MCUCR_REG,MCUCR_ISC10);
 b82:	a5 e5       	ldi	r26, 0x55	; 85
 b84:	b0 e0       	ldi	r27, 0x00	; 0
 b86:	e5 e5       	ldi	r30, 0x55	; 85
 b88:	f0 e0       	ldi	r31, 0x00	; 0
 b8a:	80 81       	ld	r24, Z
 b8c:	8b 7f       	andi	r24, 0xFB	; 251
 b8e:	8c 93       	st	X, r24
/*Enable EXTI0 Peripheral interrupt enable*/
SET_BIT(EXTI_u8_GICR_REG,GICR_INT1);

#elif INT1_INITIAL_STATE == DISABLED
/*Enable EXTI0 Peripheral interrupt enable*/
CLR_BIT(EXTI_u8_GICR_REG,GICR_INT1);
 b90:	ab e5       	ldi	r26, 0x5B	; 91
 b92:	b0 e0       	ldi	r27, 0x00	; 0
 b94:	eb e5       	ldi	r30, 0x5B	; 91
 b96:	f0 e0       	ldi	r31, 0x00	; 0
 b98:	80 81       	ld	r24, Z
 b9a:	8f 77       	andi	r24, 0x7F	; 127
 b9c:	8c 93       	st	X, r24
#else
#error "Wrong INT0_INITIAL_STATE Configuration option"
#endif
}
 b9e:	cf 91       	pop	r28
 ba0:	df 91       	pop	r29
 ba2:	08 95       	ret

00000ba4 <EXTI_voidINT2Init>:

void EXTI_voidINT2Init(void){
 ba4:	df 93       	push	r29
 ba6:	cf 93       	push	r28
 ba8:	cd b7       	in	r28, 0x3d	; 61
 baa:	de b7       	in	r29, 0x3e	; 62
/*Select the trigger source of EXTI2 to falling edge*/
CLR_BIT(EXTI_u8_MCUCSR_REG,MCUCSR_INT2);
 bac:	a4 e5       	ldi	r26, 0x54	; 84
 bae:	b0 e0       	ldi	r27, 0x00	; 0
 bb0:	e4 e5       	ldi	r30, 0x54	; 84
 bb2:	f0 e0       	ldi	r31, 0x00	; 0
 bb4:	80 81       	ld	r24, Z
 bb6:	8f 7b       	andi	r24, 0xBF	; 191
 bb8:	8c 93       	st	X, r24
/*Enable EXTI2 Peripheral interrupt enable*/
SET_BIT(EXTI_u8_GICR_REG,GICR_INT2);
 bba:	ab e5       	ldi	r26, 0x5B	; 91
 bbc:	b0 e0       	ldi	r27, 0x00	; 0
 bbe:	eb e5       	ldi	r30, 0x5B	; 91
 bc0:	f0 e0       	ldi	r31, 0x00	; 0
 bc2:	80 81       	ld	r24, Z
 bc4:	80 62       	ori	r24, 0x20	; 32
 bc6:	8c 93       	st	X, r24
}
 bc8:	cf 91       	pop	r28
 bca:	df 91       	pop	r29
 bcc:	08 95       	ret

00000bce <EXTI_u8Int0SetCallBack>:

u8 EXTI_u8Int0SetCallBack(void(*Copy_pvInt0Func)(void)){
 bce:	df 93       	push	r29
 bd0:	cf 93       	push	r28
 bd2:	00 d0       	rcall	.+0      	; 0xbd4 <EXTI_u8Int0SetCallBack+0x6>
 bd4:	0f 92       	push	r0
 bd6:	cd b7       	in	r28, 0x3d	; 61
 bd8:	de b7       	in	r29, 0x3e	; 62
 bda:	9b 83       	std	Y+3, r25	; 0x03
 bdc:	8a 83       	std	Y+2, r24	; 0x02
	u8 Local_u8ErrorState = STD_TYPES_OK;
 bde:	81 e0       	ldi	r24, 0x01	; 1
 be0:	89 83       	std	Y+1, r24	; 0x01
	if(Copy_pvInt0Func!=NULL){
 be2:	8a 81       	ldd	r24, Y+2	; 0x02
 be4:	9b 81       	ldd	r25, Y+3	; 0x03
 be6:	00 97       	sbiw	r24, 0x00	; 0
 be8:	39 f0       	breq	.+14     	; 0xbf8 <EXTI_u8Int0SetCallBack+0x2a>
		EXTI_pvINT0Func = Copy_pvInt0Func;
 bea:	8a 81       	ldd	r24, Y+2	; 0x02
 bec:	9b 81       	ldd	r25, Y+3	; 0x03
 bee:	90 93 61 00 	sts	0x0061, r25
 bf2:	80 93 60 00 	sts	0x0060, r24
 bf6:	01 c0       	rjmp	.+2      	; 0xbfa <EXTI_u8Int0SetCallBack+0x2c>
	}
	else
		Local_u8ErrorState = STD_TYPES_NOK;
 bf8:	19 82       	std	Y+1, r1	; 0x01
return Local_u8ErrorState;
 bfa:	89 81       	ldd	r24, Y+1	; 0x01
}
 bfc:	0f 90       	pop	r0
 bfe:	0f 90       	pop	r0
 c00:	0f 90       	pop	r0
 c02:	cf 91       	pop	r28
 c04:	df 91       	pop	r29
 c06:	08 95       	ret

00000c08 <EXTI_u8Int1SetCallBack>:
u8 EXTI_u8Int1SetCallBack(void(*Copy_pvInt1Func)(void)){
 c08:	df 93       	push	r29
 c0a:	cf 93       	push	r28
 c0c:	00 d0       	rcall	.+0      	; 0xc0e <EXTI_u8Int1SetCallBack+0x6>
 c0e:	0f 92       	push	r0
 c10:	cd b7       	in	r28, 0x3d	; 61
 c12:	de b7       	in	r29, 0x3e	; 62
 c14:	9b 83       	std	Y+3, r25	; 0x03
 c16:	8a 83       	std	Y+2, r24	; 0x02
	u8 Local_u8ErrorState = STD_TYPES_OK;
 c18:	81 e0       	ldi	r24, 0x01	; 1
 c1a:	89 83       	std	Y+1, r24	; 0x01
	if(Copy_pvInt1Func!=NULL){
 c1c:	8a 81       	ldd	r24, Y+2	; 0x02
 c1e:	9b 81       	ldd	r25, Y+3	; 0x03
 c20:	00 97       	sbiw	r24, 0x00	; 0
 c22:	39 f0       	breq	.+14     	; 0xc32 <EXTI_u8Int1SetCallBack+0x2a>
		EXTI_pvINT1Func = Copy_pvInt1Func;
 c24:	8a 81       	ldd	r24, Y+2	; 0x02
 c26:	9b 81       	ldd	r25, Y+3	; 0x03
 c28:	90 93 63 00 	sts	0x0063, r25
 c2c:	80 93 62 00 	sts	0x0062, r24
 c30:	01 c0       	rjmp	.+2      	; 0xc34 <EXTI_u8Int1SetCallBack+0x2c>
	}
	else
		Local_u8ErrorState = STD_TYPES_NOK;
 c32:	19 82       	std	Y+1, r1	; 0x01
return Local_u8ErrorState;
 c34:	89 81       	ldd	r24, Y+1	; 0x01
}
 c36:	0f 90       	pop	r0
 c38:	0f 90       	pop	r0
 c3a:	0f 90       	pop	r0
 c3c:	cf 91       	pop	r28
 c3e:	df 91       	pop	r29
 c40:	08 95       	ret

00000c42 <EXTI_u8Int2SetCallBack>:
u8 EXTI_u8Int2SetCallBack(void(*Copy_pvInt2Func)(void)){
 c42:	df 93       	push	r29
 c44:	cf 93       	push	r28
 c46:	00 d0       	rcall	.+0      	; 0xc48 <EXTI_u8Int2SetCallBack+0x6>
 c48:	0f 92       	push	r0
 c4a:	cd b7       	in	r28, 0x3d	; 61
 c4c:	de b7       	in	r29, 0x3e	; 62
 c4e:	9b 83       	std	Y+3, r25	; 0x03
 c50:	8a 83       	std	Y+2, r24	; 0x02
	u8 Local_u8ErrorState = STD_TYPES_OK;
 c52:	81 e0       	ldi	r24, 0x01	; 1
 c54:	89 83       	std	Y+1, r24	; 0x01
	if(Copy_pvInt2Func!=NULL){
 c56:	8a 81       	ldd	r24, Y+2	; 0x02
 c58:	9b 81       	ldd	r25, Y+3	; 0x03
 c5a:	00 97       	sbiw	r24, 0x00	; 0
 c5c:	39 f0       	breq	.+14     	; 0xc6c <EXTI_u8Int2SetCallBack+0x2a>
		EXTI_pvINT0Func = Copy_pvInt2Func;
 c5e:	8a 81       	ldd	r24, Y+2	; 0x02
 c60:	9b 81       	ldd	r25, Y+3	; 0x03
 c62:	90 93 61 00 	sts	0x0061, r25
 c66:	80 93 60 00 	sts	0x0060, r24
 c6a:	01 c0       	rjmp	.+2      	; 0xc6e <EXTI_u8Int2SetCallBack+0x2c>
	}
	else
		Local_u8ErrorState = STD_TYPES_NOK;
 c6c:	19 82       	std	Y+1, r1	; 0x01
return Local_u8ErrorState;
 c6e:	89 81       	ldd	r24, Y+1	; 0x01
}
 c70:	0f 90       	pop	r0
 c72:	0f 90       	pop	r0
 c74:	0f 90       	pop	r0
 c76:	cf 91       	pop	r28
 c78:	df 91       	pop	r29
 c7a:	08 95       	ret

00000c7c <__vector_1>:
/*ISR of INT0*/
void __vector_1(void) __attribute__((signal));
void __vector_1(void){
 c7c:	1f 92       	push	r1
 c7e:	0f 92       	push	r0
 c80:	0f b6       	in	r0, 0x3f	; 63
 c82:	0f 92       	push	r0
 c84:	11 24       	eor	r1, r1
 c86:	2f 93       	push	r18
 c88:	3f 93       	push	r19
 c8a:	4f 93       	push	r20
 c8c:	5f 93       	push	r21
 c8e:	6f 93       	push	r22
 c90:	7f 93       	push	r23
 c92:	8f 93       	push	r24
 c94:	9f 93       	push	r25
 c96:	af 93       	push	r26
 c98:	bf 93       	push	r27
 c9a:	ef 93       	push	r30
 c9c:	ff 93       	push	r31
 c9e:	df 93       	push	r29
 ca0:	cf 93       	push	r28
 ca2:	cd b7       	in	r28, 0x3d	; 61
 ca4:	de b7       	in	r29, 0x3e	; 62
	if(EXTI_pvINT0Func != NULL){
 ca6:	80 91 60 00 	lds	r24, 0x0060
 caa:	90 91 61 00 	lds	r25, 0x0061
 cae:	00 97       	sbiw	r24, 0x00	; 0
 cb0:	29 f0       	breq	.+10     	; 0xcbc <__vector_1+0x40>
		EXTI_pvINT0Func();
 cb2:	e0 91 60 00 	lds	r30, 0x0060
 cb6:	f0 91 61 00 	lds	r31, 0x0061
 cba:	09 95       	icall
	}
	}
 cbc:	cf 91       	pop	r28
 cbe:	df 91       	pop	r29
 cc0:	ff 91       	pop	r31
 cc2:	ef 91       	pop	r30
 cc4:	bf 91       	pop	r27
 cc6:	af 91       	pop	r26
 cc8:	9f 91       	pop	r25
 cca:	8f 91       	pop	r24
 ccc:	7f 91       	pop	r23
 cce:	6f 91       	pop	r22
 cd0:	5f 91       	pop	r21
 cd2:	4f 91       	pop	r20
 cd4:	3f 91       	pop	r19
 cd6:	2f 91       	pop	r18
 cd8:	0f 90       	pop	r0
 cda:	0f be       	out	0x3f, r0	; 63
 cdc:	0f 90       	pop	r0
 cde:	1f 90       	pop	r1
 ce0:	18 95       	reti

00000ce2 <__vector_2>:
/*ISR of INT0*/
void __vector_2(void) __attribute__((signal));
void __vector_2(void){
 ce2:	1f 92       	push	r1
 ce4:	0f 92       	push	r0
 ce6:	0f b6       	in	r0, 0x3f	; 63
 ce8:	0f 92       	push	r0
 cea:	11 24       	eor	r1, r1
 cec:	2f 93       	push	r18
 cee:	3f 93       	push	r19
 cf0:	4f 93       	push	r20
 cf2:	5f 93       	push	r21
 cf4:	6f 93       	push	r22
 cf6:	7f 93       	push	r23
 cf8:	8f 93       	push	r24
 cfa:	9f 93       	push	r25
 cfc:	af 93       	push	r26
 cfe:	bf 93       	push	r27
 d00:	ef 93       	push	r30
 d02:	ff 93       	push	r31
 d04:	df 93       	push	r29
 d06:	cf 93       	push	r28
 d08:	cd b7       	in	r28, 0x3d	; 61
 d0a:	de b7       	in	r29, 0x3e	; 62
	if(EXTI_pvINT1Func != NULL){
 d0c:	80 91 62 00 	lds	r24, 0x0062
 d10:	90 91 63 00 	lds	r25, 0x0063
 d14:	00 97       	sbiw	r24, 0x00	; 0
 d16:	29 f0       	breq	.+10     	; 0xd22 <__vector_2+0x40>
		EXTI_pvINT1Func();
 d18:	e0 91 62 00 	lds	r30, 0x0062
 d1c:	f0 91 63 00 	lds	r31, 0x0063
 d20:	09 95       	icall
	}
	}
 d22:	cf 91       	pop	r28
 d24:	df 91       	pop	r29
 d26:	ff 91       	pop	r31
 d28:	ef 91       	pop	r30
 d2a:	bf 91       	pop	r27
 d2c:	af 91       	pop	r26
 d2e:	9f 91       	pop	r25
 d30:	8f 91       	pop	r24
 d32:	7f 91       	pop	r23
 d34:	6f 91       	pop	r22
 d36:	5f 91       	pop	r21
 d38:	4f 91       	pop	r20
 d3a:	3f 91       	pop	r19
 d3c:	2f 91       	pop	r18
 d3e:	0f 90       	pop	r0
 d40:	0f be       	out	0x3f, r0	; 63
 d42:	0f 90       	pop	r0
 d44:	1f 90       	pop	r1
 d46:	18 95       	reti

00000d48 <__vector_3>:
/*ISR of INT0*/
void __vector_3(void) __attribute__((signal));
void __vector_3(void){
 d48:	1f 92       	push	r1
 d4a:	0f 92       	push	r0
 d4c:	0f b6       	in	r0, 0x3f	; 63
 d4e:	0f 92       	push	r0
 d50:	11 24       	eor	r1, r1
 d52:	2f 93       	push	r18
 d54:	3f 93       	push	r19
 d56:	4f 93       	push	r20
 d58:	5f 93       	push	r21
 d5a:	6f 93       	push	r22
 d5c:	7f 93       	push	r23
 d5e:	8f 93       	push	r24
 d60:	9f 93       	push	r25
 d62:	af 93       	push	r26
 d64:	bf 93       	push	r27
 d66:	ef 93       	push	r30
 d68:	ff 93       	push	r31
 d6a:	df 93       	push	r29
 d6c:	cf 93       	push	r28
 d6e:	cd b7       	in	r28, 0x3d	; 61
 d70:	de b7       	in	r29, 0x3e	; 62
	if(EXTI_pvINT2Func != NULL){
 d72:	80 91 64 00 	lds	r24, 0x0064
 d76:	90 91 65 00 	lds	r25, 0x0065
 d7a:	00 97       	sbiw	r24, 0x00	; 0
 d7c:	29 f0       	breq	.+10     	; 0xd88 <__vector_3+0x40>
		EXTI_pvINT2Func();
 d7e:	e0 91 64 00 	lds	r30, 0x0064
 d82:	f0 91 65 00 	lds	r31, 0x0065
 d86:	09 95       	icall
	}
	}
 d88:	cf 91       	pop	r28
 d8a:	df 91       	pop	r29
 d8c:	ff 91       	pop	r31
 d8e:	ef 91       	pop	r30
 d90:	bf 91       	pop	r27
 d92:	af 91       	pop	r26
 d94:	9f 91       	pop	r25
 d96:	8f 91       	pop	r24
 d98:	7f 91       	pop	r23
 d9a:	6f 91       	pop	r22
 d9c:	5f 91       	pop	r21
 d9e:	4f 91       	pop	r20
 da0:	3f 91       	pop	r19
 da2:	2f 91       	pop	r18
 da4:	0f 90       	pop	r0
 da6:	0f be       	out	0x3f, r0	; 63
 da8:	0f 90       	pop	r0
 daa:	1f 90       	pop	r1
 dac:	18 95       	reti

00000dae <GIE_voidEnable>:
#include "BIT_MATH.h"

#include "GIE_interface.h"
#include "GIE_private.h"

void GIE_voidEnable(void){
 dae:	df 93       	push	r29
 db0:	cf 93       	push	r28
 db2:	cd b7       	in	r28, 0x3d	; 61
 db4:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(SREG,SREG_I);
 db6:	af e5       	ldi	r26, 0x5F	; 95
 db8:	b0 e0       	ldi	r27, 0x00	; 0
 dba:	ef e5       	ldi	r30, 0x5F	; 95
 dbc:	f0 e0       	ldi	r31, 0x00	; 0
 dbe:	80 81       	ld	r24, Z
 dc0:	80 68       	ori	r24, 0x80	; 128
 dc2:	8c 93       	st	X, r24
}
 dc4:	cf 91       	pop	r28
 dc6:	df 91       	pop	r29
 dc8:	08 95       	ret

00000dca <GIE_voidDisable>:
void GIE_voidDisable(void){
 dca:	df 93       	push	r29
 dcc:	cf 93       	push	r28
 dce:	cd b7       	in	r28, 0x3d	; 61
 dd0:	de b7       	in	r29, 0x3e	; 62
	CLR_BIT(SREG,SREG_I);
 dd2:	af e5       	ldi	r26, 0x5F	; 95
 dd4:	b0 e0       	ldi	r27, 0x00	; 0
 dd6:	ef e5       	ldi	r30, 0x5F	; 95
 dd8:	f0 e0       	ldi	r31, 0x00	; 0
 dda:	80 81       	ld	r24, Z
 ddc:	8f 77       	andi	r24, 0x7F	; 127
 dde:	8c 93       	st	X, r24
}
 de0:	cf 91       	pop	r28
 de2:	df 91       	pop	r29
 de4:	08 95       	ret

00000de6 <main>:
#include "EXTI_interface.h"
#include "GIE_interface.h"

void INT0_ISR();

int main(){
 de6:	df 93       	push	r29
 de8:	cf 93       	push	r28
 dea:	cd b7       	in	r28, 0x3d	; 61
 dec:	de b7       	in	r29, 0x3e	; 62
/*Set Directions of PD2(EXTI0) --> Input Pull-up// PC0(Led) --> Output */
	DIO_u8Init();
 dee:	0e 94 3e 00 	call	0x7c	; 0x7c <DIO_u8Init>
	EXTI_voidINT0Init();
 df2:	0e 94 9a 05 	call	0xb34	; 0xb34 <EXTI_voidINT0Init>
	EXTI_u8Int0SetCallBack(&INT0_ISR);
 df6:	82 e0       	ldi	r24, 0x02	; 2
 df8:	97 e0       	ldi	r25, 0x07	; 7
 dfa:	0e 94 e7 05 	call	0xbce	; 0xbce <EXTI_u8Int0SetCallBack>
	GIE_voidEnable();
 dfe:	0e 94 d7 06 	call	0xdae	; 0xdae <GIE_voidEnable>
 e02:	ff cf       	rjmp	.-2      	; 0xe02 <main+0x1c>

00000e04 <INT0_ISR>:

	}
	return 0;
}
/*ISR of EXTI0 implementation*/
void INT0_ISR(){
 e04:	df 93       	push	r29
 e06:	cf 93       	push	r28
 e08:	cd b7       	in	r28, 0x3d	; 61
 e0a:	de b7       	in	r29, 0x3e	; 62
DIO_u8TogglePinValue(DIO_u8_PORTC,DIO_u8_PIN0);
 e0c:	82 e0       	ldi	r24, 0x02	; 2
 e0e:	60 e0       	ldi	r22, 0x00	; 0
 e10:	0e 94 6e 04 	call	0x8dc	; 0x8dc <DIO_u8TogglePinValue>
}
 e14:	cf 91       	pop	r28
 e16:	df 91       	pop	r29
 e18:	08 95       	ret

00000e1a <_exit>:
 e1a:	f8 94       	cli

00000e1c <__stop_program>:
 e1c:	ff cf       	rjmp	.-2      	; 0xe1c <__stop_program>
